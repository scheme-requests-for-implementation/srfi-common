(define org-markup-map '((b "*" "*")
			 (code "~" "~")
			 (del "+" "+")
			 (em "/" "/")
			 (h1 "\n* " "\n")
			 (h2 "\n** " "\n")
			 (h3 "\n*** " "\n")
			 (h4 "\n**** " "\n")
			 (h5 "\n***** " "\n")
			 (h6 "\n****** " "\n")
			 (p "\n" "\n")
			 (u "_" "_")))

(define (sxml-display-as-org sxml . o)
  (let ((out (if (pair? o) (car o) (current-output-port)))
        (sxml (if (and (pair? sxml) (eq? '*TOP* (car sxml)))
                  (cdr sxml)
                  sxml)))
    (let lp ((sxml sxml))
      (cond
       ((pair? sxml)
        (let ((tag (car sxml))
	      (rest (cdr sxml)))
          (cond ((memq tag '(head style script !DOCTYPE)))
		((eq? tag 'a)
		 (let ((rest (cdr sxml)))
		   (assert (and (pair? rest)
				(pair? (car rest))
				(eq? '@ (caar rest))
				(assq 'href (cdar rest))))
		   (write-string "[[" out)
		   (write-string (cadr (assq 'href (cdar rest))) out)
		   (write-string "][" out)
		   (lp (cdr rest))
		   (write-string "]]" out)))
		((symbol? tag)
		 (cond ((eq? tag 'pre) (write-string "#+begin_src scheme" out))
		       ((assq tag org-markup-map)
			=> (lambda (a) (write-string (cadr a) out))))
		 (for-each
		  lp
		  (if (and (pair? rest)
			   (pair? (car rest))
			   (eq? '@ (caar rest)))
		      (cdr rest)
		      rest))
		 (cond ((eq? tag 'pre) (write-string "#+end_src" out))
		       ((assq tag org-markup-map)
			=> (lambda (a) (write-string (car (cddr a)) out)))))
		(else (for-each lp sxml)))))
       ((null? sxml))
       (else (display sxml out))))))

(define (write-org-file file sxml)
  (call-with-output-file file
    (lambda (port) (sxml-display-as-org sxml port))))