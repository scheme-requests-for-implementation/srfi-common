(define-library (srfi-tools toc)
  (export srfi-generate-toc)
  (import (scheme base)
          (scheme char)
          (scheme cxr)
          (scheme process-context)
          (scheme write)

          (srfi-tools private list)
          (srfi-tools private string)
          (srfi-tools private port)
          (srfi-tools private sxml)
          (srfi-tools private html-parser)
          (srfi-tools private command)
          (srfi-tools data)
          (srfi-tools path))
  (begin

    (define (heading-level tag)
      (case tag
        ((h1) 1)
        ((h2) 2)
        ((h3) 3)
        ((h4) 4)
        ((h5) 5)
        ((h6) 6)
        (else #f)))

    (define (headings elem)
      (if (not (pair? elem))
          '()
          (let ((level (heading-level (car elem))))
            (if level
                (list (cons level (sxml-body-as-string elem)))
                (append-map headings (sxml-body elem))))))

    (define (headings->tree/values hs)
      (let deeper ((level #f) (hs hs))
        (let same-level ((acc '()) (hs hs))
          (if (null? hs) (values acc '())
              (let* ((h (car hs))
                     (l (car h)))
                (cond ((not level) (deeper l hs))
                      ((< l level) (values acc hs))
                      (else (let-values (((subtree hs)
                                          (deeper (+ l 1) (cdr hs))))
                              (same-level (append acc
                                                  (list (cons (cdr h)
                                                              subtree)))
                                          hs)))))))))

    (define (headings->tree hs)
      (let-values (((subtree hs) (headings->tree/values hs)))
        subtree))

    (define (write-html-toc indent items)
      (let ((uniq (unique-string-accumulator)))
        (define (link-html title)
          (string-append "<a href=\"#" (uniq (string->slug title)) "\">"
                         title
                         "</a>"))
        (let display-list ((indent indent) (items items))
          (disp indent "<ul>")
          (let ((indent (string-append indent "  ")))
            (for-each (lambda (item)
                        (let* ((title (car item))
                               (link (link-html title)))
                          (cond ((null? (cdr item))
                                 (disp indent "<li>" link "</li>"))
                                (else
                                 (disp indent "<li>")
                                 (let ((indent (string-append indent "  ")))
                                   (disp indent link)
                                   (display-list indent (cdr item)))
                                 (disp indent "</li>")))))
                      items))
          (disp indent "</ul>"))
        (newline)
        (for-each (lambda (slug) (disp " id=\"" slug "\""))
                  (uniq (eof-object)))))

    (define (wanted-heading? h)
      (and (<= 2 (car h) 4)
           (not (member (string-downcase (cdr h))
                        '("title" "author" "status" "abstract" "issues"
                          "table of contents" "copyright")))))

    (define (srfi-generate-toc html-file)
      (let* ((sxml (read-html-file html-file))
             (hdgs (filter wanted-heading? (headings sxml))))
        (write-html-toc "  " (headings->tree hdgs))))

    (define-command (generate-toc num)
      "Display an HTML table of contents for SRFI <num>."
      (srfi-generate-toc (srfi-html-file (parse-srfi-number num))))))
