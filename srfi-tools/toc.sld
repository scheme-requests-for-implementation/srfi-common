(define-library (srfi-tools toc)
  (export srfi-toc)
  (import (scheme base)
          (scheme char)
          (scheme cxr)
          (scheme file)
          (scheme process-context)
          (scheme write)
          (srfi-tools private list)
          (srfi-tools private string)
          (srfi-tools private port)
          (srfi-tools private sxml)
          (srfi-tools private html-parser)
          (srfi-tools private command)
          (srfi-tools data)
          (srfi-tools path))
  (begin

    (define (heading-level tag)
      (case tag
        ((h1) 1)
        ((h2) 2)
        ((h3) 3)
        ((h4) 4)
        ((h5) 5)
        ((h6) 6)
        (else #f)))

    (define (headings elem)
      (if (not (pair? elem))
          '()
          (let ((level (heading-level (car elem))))
            (if level
                (list (cons level (sxml-body-as-string elem)))
                (append-map headings (sxml-body elem))))))

    (define (headings->tree/values hs)
      (let deeper ((level #f) (hs hs))
        (let same-level ((acc '()) (hs hs))
          (if (null? hs) (values acc '())
              (let* ((h (car hs))
                     (l (car h)))
                (cond ((not level) (deeper l hs))
                      ((< l level) (values acc hs))
                      (else (let-values (((subtree hs)
                                          (deeper (+ l 1) (cdr hs))))
                              (same-level (append acc
                                                  (list (cons (cdr h)
                                                              subtree)))
                                          hs)))))))))

    (define (headings->tree hs)
      (let-values (((subtree hs) (headings->tree/values hs)))
        subtree))

    (define (string->slug string)
      (let ((chars
             (string-fold
              (lambda (char chars)
                (cond ((or (ascii-alphabetic? char)
                           (ascii-numeric? char))
                       (cons char chars))
                      ((or (null? chars)
                           (char=? #\_ (car chars)))
                       chars)
                      (else
                       (cons #\_ chars))))
              '()
              (string-downcase string))))
        (list->string
         (reverse
          (if (or (null? chars) (not (char=? #\_ (car chars))))
              chars (cdr chars))))))

    (define (write-html-toc indent items)
      (define slugs '())
      (define (gen-id title)
        (let loop ((i 1))
          (let ((slug (string-append "_" (string->slug title)
                                     (if (< i 2) "" (number->string i)))))
            (if (member slug slugs)
                (loop (+ i 1))
                (begin (set! slugs (append slugs (list slug)))
                       slug)))))
      (let display-list ((indent indent) (items items))
        (disp indent "<ul>")
        (let ((indent (string-append indent "  ")))
          (for-each (lambda (item)
                      (let* ((title (car item))
                             (link (string-append
                                    "<a href=\"#" (gen-id title) "\">"
                                    title "</a>")))
                        (cond ((null? (cdr item))
                               (disp indent "<li>" link "</li>"))
                              (else
                               (disp indent "<li>")
                               (let ((indent (string-append indent "  ")))
                                 (disp indent link)
                                 (display-list indent (cdr item)))
                               (disp indent "</li>")))))
                    items))
        (disp indent "</ul>"))
      (newline)
      (for-each (lambda (slug)
                  (display " id=\"") (display slug) (disp "\""))
                slugs))

    (define (wanted-heading? h)
      (and (<= 2 (car h) 4)
           (not (member (string-downcase (cdr h))
                        '("title" "author" "status" "abstract"
                          "table of contents" "copyright")))))

    (define (srfi-toc html-file)
      (let* ((html (with-input-from-file html-file read-all-chars))
             (sxml (call-with-port (open-input-string html) html->sxml))
             (hdgs (filter wanted-heading? (headings sxml))))
        (write-html-toc "  " (headings->tree hdgs))))

    (define-command (toc num)
      (srfi-toc (srfi-html-file (parse-srfi-number num))))))
