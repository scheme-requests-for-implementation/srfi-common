<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Scheme Requests for Implementation</title><link>https://srfi.schemers.org/</link><description>Updates to SRFI documents</description><language>en-US</language><webMaster>srfi@speechcode.com (Arthur A. Gleckler)</webMaster><atom:link href="https://srfi.schemers.org/srfi.rss" rel="self" type="application/rss+xml"></atom:link><item><title>SRFI 253: Data (Type-)Checking</title><link>https://srfi.schemers.org/srfi-253/</link><guid>https://srfi.schemers.org/srfi-253</guid><description>SRFI 253 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
  Data validation and type checking (supposedly) make for more correct code.
  And faster code too, sometimes.
  And, in rare cases, code that's easier to follow than un-checked code.
  Unfortunately, Scheme does not have many (type-)checking primitives out of the box.
  This SRFI provides some, with the aim of allowing more performant and correct code with minimum effort on the user side.
  Both (manual) argument checking/validation (&lt;code>check-arg&lt;/code>)
  and return value(s) (&lt;code>values-checked&lt;/code>) checking/coercion are provided.
  Syntax sugar like &lt;code>define-checked&lt;/code>
  and &lt;code>define-record-type-checked&lt;/code> is added on top.
&lt;/p>&lt;/blockquote></description><dc:creator>Artyom Bologov</dc:creator><pubDate>Fri, 15 Nov 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 234: Topological Sorting</title><link>https://srfi.schemers.org/srfi-234/</link><guid>https://srfi.schemers.org/srfi-234</guid><description>SRFI 234 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
Topological sorting is an algorithm that takes a graph consisting of
nodes and other nodes that depend on them, forming a partial order,
and returns a list representing a total ordering of the graph. If the
graph is cyclic, the topological sort will fail. The
procedure &lt;code>topological-sort&lt;/code> returns three values. If
sorting succeeds, the first value contains the result and the second
and third are &lt;code>#false&lt;/code>. If sorting fails, the result
is &lt;code>#false&lt;/code> and the second and third value may provide
additional information about the error.
&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Arne Babenhauserheide</dc:creator><pubDate>Tue, 24 Sep 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 250: Insertion-ordered hash tables</title><link>https://srfi.schemers.org/srfi-250/</link><guid>https://srfi.schemers.org/srfi-250</guid><description>SRFI 250 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines an interface to hash tables, which are widely
recognized as a fundamental data structure for a wide variety of
applications.  A hash table is a data structure that:&lt;/p>
&lt;ul>
  &lt;li>Is disjoint from all other types.&lt;/li>
  &lt;li>Provides a mapping from objects known as &lt;em>keys&lt;/em>
    to corresponding objects known as &lt;em>values&lt;/em>.
    &lt;ul>
      &lt;li>Keys may be any Scheme objects in some kinds of hash tables,
        but are restricted in other kinds.&lt;/li>
      &lt;li>Values may be any Scheme objects.&lt;/li>&lt;/ul>&lt;/li>
  &lt;li>Provides an &lt;em>equality predicate&lt;/em> which defines
    when a proposed key is the same as an existing key.  No table
    may contain more than one value for a given key.&lt;/li>
  &lt;li>Provides a &lt;em>hash function&lt;/em> which maps a candidate
    key into a non-negative exact integer.&lt;/li>
  &lt;li>Supports mutation as the primary means of setting the
    contents of a table.&lt;/li>
  &lt;li>Provides key lookup and destructive update in (expected)
    amortized constant time, provided that a satisfactory hash
    function is available.&lt;/li>
  &lt;li>Does not guarantee that whole-table operations work in
    the presence of concurrent mutation of the whole hash table.
    (Values may be safely mutated.)&lt;/li>
&lt;/ul>

&lt;p>
Unlike the hash tables of &lt;a href="https://srfi.schemers.org/srfi-125/">SRFI 125&lt;/a>,
which is the direct ancestor of this specification, the hash tables described
here are ordered by insertion: that is, associations inserted earlier in
the history of the hash table appear earlier in the ordering.  Advances
in the implementations of hash tables, as provided by C++, Python,
JavaScript, etc., make the provision of this new facility practical.
As a result, the hash tables of this SRFI do not interoperate with the
hash tables of SRFI 125, &lt;a href="https://srfi.schemers.org/srfi-126/">SRFI 126&lt;/a>,
or existing R6RS implementations.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 24 Sep 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 249: Restarting conditions</title><link>https://srfi.schemers.org/srfi-249/</link><guid>https://srfi.schemers.org/srfi-249</guid><description>SRFI 249 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>When an exceptional situation is encountered by a program, it may
create a &lt;em>condition&lt;/em> object describing the situation and then
signal the condition and pass control to a condition handler. The
signaler and handler are two different parts of a system, between which
there is a barrier of abstraction. In order to recover gracefully and
flexibly from exceptional situations, however, the signaler can provide
multiple ways by which the handler can restart the computation, some of
which may require extra input. Often, the decision of which method of
recovery to choose is left up to a human user, who may be prompted for
the input needed to recover. This SRFI proposes a simple mechanism
called &lt;em>restarters&lt;/em> to encapsulate the information necessary to
restart a computation with associated interactive prompters.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Fri, 13 Sep 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 246: Guardians</title><link>https://srfi.schemers.org/srfi-246/</link><guid>https://srfi.schemers.org/srfi-246</guid><description>SRFI 246 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Guardians allow programs to protect objects from deallocation by the garbage collector and to determine which objects would otherwise have been deallocated. When the object has associated non-memory resources, a program can register it with a guardian. The GC will mark inaccessible objects but will not collect them; at the program's convenience, inaccessible objects are removed from the guardian and their non-memory resources are disposed of.

Guardians allow objects to be saved from deallocation indefinitely so that they can be reused or so that clean-up or other actions can be performed using the data stored within the objects. Guardians avoid the problems associated with classical finalizers detailed in the Rationale section.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Wed, 11 Sep 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 251: Mixing groups of definitions with expressions within bodies</title><link>https://srfi.schemers.org/srfi-251/</link><guid>https://srfi.schemers.org/srfi-251</guid><description>SRFI 251 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
Scheme has traditionally required procedure bodies and the bodies of derived constructs
such as &lt;code>let&lt;/code> to contain definitions followed by commands/expressions.
This SRFI proposes to allow mixing commands and groups of definitions in such bodies, so that each
command/expression is in the scope of all local definition groups preceding it, but not in scope of
the local definition groups following it. This approach is backwards compatible with R7RS and
upholds the intuitive rule that to find the definition of a lexical variable, one has
to look &lt;em>up&lt;/em> the source code tree.
&lt;/p>&lt;/blockquote></description><dc:creator>Sergei Egorov</dc:creator><pubDate>Mon, 06 May 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 252: Property Testing</title><link>https://srfi.schemers.org/srfi-252/</link><guid>https://srfi.schemers.org/srfi-252</guid><description>SRFI 252 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This defines an extension of the
&lt;a href="https://srfi.schemers.org/srfi-64/srfi-64.html">SRFI 64&lt;/a>
test suite API to support property testing. It uses
&lt;a href="https://srfi.schemers.org/srfi-158/srfi-158.html">SRFI 158&lt;/a>
generators to generate test inputs, which allows for the creation of custom
input generators. It uses
&lt;a href="https://srfi.schemers.org/srfi-194/srfi-194.html">SRFI 194&lt;/a>
as the source of random data, so that the generation of random test inputs can
be made deterministic. For convenience, it also provides procedures to
create test input generators for the types specified in R7RS-small. The
interface to run property tests is similar to that of
&lt;a href="https://srfi.schemers.org/srfi-64/srfi-64.html">SRFI 64&lt;/a>,
and a property-testing-specific test runner is specified in order to display
the results of the propertized tests.&lt;/p>&lt;/blockquote></description><dc:creator>Antero Mejr</dc:creator><pubDate>Thu, 25 Apr 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 245: Mixing definitions and expressions within bodies</title><link>https://srfi.schemers.org/srfi-245/</link><guid>https://srfi.schemers.org/srfi-245</guid><description>SRFI 245 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Scheme has traditionally required procedure bodies and the bodies of derived constructs such as &lt;code>let&lt;/code> to contain definitions followed by expressions. This SRFI proposes to allow expressions to appear before and intermingled with definitions in such bodies, as was allowed in program bodies by the R6RS and in library bodies by R7RS small.&lt;/p>&lt;/blockquote></description><dc:creator>Daphne Preston-Kendal</dc:creator><pubDate>Thu, 04 Apr 2024 12:00:00 -0800</pubDate></item><item><title>SRFI 247: Syntactic Monads</title><link>https://srfi.schemers.org/srfi-247/</link><guid>https://srfi.schemers.org/srfi-247</guid><description>SRFI 247 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI extends Scheme with a simple mechanism to implicitly add
      formal arguments to procedure definitions and to implicitly add
      arguments to procedure calls.  Contrary to parameters (also known as fluids
      or dynamically bound variables), which can be used for the same
      purpose, no runtime overhead is generated.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 24 Dec 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 243: Unreadable Data</title><link>https://srfi.schemers.org/srfi-243/</link><guid>https://srfi.schemers.org/srfi-243</guid><description>SRFI 243 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI suggests how the Scheme reader and writer should
  handle unreadable data in general, and unreadable objects in
  particular.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Thu, 30 Nov 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 255: Restarting conditions</title><link>https://srfi.schemers.org/srfi-255/</link><guid>https://srfi.schemers.org/srfi-255</guid><description>SRFI 255 is now in &lt;em>draft&lt;/em> status.&lt;blockquote>&lt;p>When an exceptional situation is encountered by a program, it
usually creates a condition object describing the situation and then
passes control to an exception handler. The
signaler and handler are two different parts of a system, between which
there is a barrier of abstraction. In order to recover gracefully and
flexibly from exceptional situations, however, the signaler can provide
multiple ways by which the handler can restart the computation, some of
which may require extra input. Often, the decision of which method of
recovery to choose is left up to a human user, who may be prompted for
the input needed to recover. This SRFI proposes a mechanism
called &lt;dfn>restarters&lt;/dfn> which uses a new type of condition object
and an associated exception handler to encapsulate the information
necessary to restart a computation. We also
describe the behavior and interface of &lt;dfn>interactor&lt;/dfn> procedures,
which implement interactive restarts.&lt;/p>&lt;/blockquote></description><dc:creator>Wolfgang Corcoran-Mathe</dc:creator><pubDate>Mon, 13 Nov 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 242: The CFG Language</title><link>https://srfi.schemers.org/srfi-242/</link><guid>https://srfi.schemers.org/srfi-242</guid><description>SRFI 242 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI defines a language to describe control-flow graphs
      (CFGs) suitable for formulating iterative and recursive
      algorithms.  Using the notion of a CFG term, this language can
      be seamlessly embedded in the Scheme language.  Complex CFG
      terms can be composed from simple CFG terms.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 29 Oct 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 248: Minimal delimited continuations</title><link>https://srfi.schemers.org/srfi-248/</link><guid>https://srfi.schemers.org/srfi-248</guid><description>SRFI 248 is now in &lt;em>draft&lt;/em> status.&lt;blockquote>    &lt;p>
      Scheme's exception system is extended so that exception handlers
      gain access to the delimited continuation representing the rest
      of the computation of the call of the thunk guarded by the
      handler.  Algebraic effect handlers can be directly expressed in
      this extended exception system.  The system directly implements
      the &lt;code>shift0&lt;/code>/&lt;code>reset0&lt;/code> delimited control
      operators.  It is well known that other delimited control
      operators like &lt;code>prompt0&lt;/code>/&lt;code>control0&lt;/code> or
      &lt;code>reset&lt;/code>/&lt;code>shift&lt;/code> are expressible
      in &lt;code>shift0&lt;/code>/&lt;code>reset0&lt;/code> (and vice versa).
    &lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 29 Oct 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 154: First-class dynamic extents</title><link>https://srfi.schemers.org/srfi-154/</link><guid>https://srfi.schemers.org/srfi-154</guid><description>SRFI 154 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Scheme has the notion of the &lt;em>dynamic extent&lt;/em> of a
  procedure call.  A number of standard Scheme procedures and
  syntaxes
  like &lt;code>dynamic-wind&lt;/code>, &lt;code>call-with-current-continuation&lt;/code>,
  and &lt;code>parameterize&lt;/code>
  deal with the dynamic extent indirectly.  The same holds true
  for the procedures and syntaxes dealing with continuation
  marks as defined by &lt;a href="https://srfi.schemers.org/srfi-157/srfi-157.html">SRFI
  157&lt;/a>.&lt;/p>

&lt;p>This SRFI reifies the dynamic extent into a first-class value
  together with a well-defined procedural interface and a syntax to
  create procedures that remember not only their environment at
  creation time but also their dynamic extent, which includes their
  dynamic environment.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 29 Jun 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 155: Promises</title><link>https://srfi.schemers.org/srfi-155/</link><guid>https://srfi.schemers.org/srfi-155</guid><description>SRFI 155 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>	&lt;p>
	  Scheme, like ML, is a programming language with strict evaluation
	  while others, like Haskell, use lazy evaluation.  Scheme, however,
	  possesses the primitives &lt;code>delay&lt;/code> and &lt;code>force&lt;/code>
	  that make it possible to express lazy algorithms.

	&lt;/p>&lt;p>
	  Lazy evaluation does not go well in conjunction with imperative,
	  non-functional, side-effecting code.  It should, however, be
	  applicable in a purely functional setting.  This is the case for the
	  delayed evaluation model as described in the R7RS as long as no
	  dynamically bound variables, also known as parameter objects, are
	  present.  It is the purpose of this SRFI to rework the specification
	  in the R7RS so that lazy evaluation works with purely functional code
	  that makes use of dynamic environments or, more generally, the dynamic
	  extent.  This is done by remembering the dynamic extent in effect when
	  the &lt;code>delay&lt;/code> expression is evaluated.

	&lt;/p>&lt;p>
	  Another perceived misfeature of the R7RS model of delayed evaluation
	  is the apparent need of the &lt;code>delay-force&lt;/code> special form to
	  express iterative lazy algorithms.  It is shown that
	  the &lt;code>delay-force&lt;/code> special form is unneeded and that the
	  implementation can (and should) handle iterative lazy algorithms
	  without space leaks.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 29 Jun 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 157: Continuation marks</title><link>https://srfi.schemers.org/srfi-157/</link><guid>https://srfi.schemers.org/srfi-157</guid><description>SRFI 157 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>
  Continuation marks are a programming language feature that allows
  one to attach information to and retrieve information from
  continuations, generalizing stack inspection.  Conceptually, a
  continuation consists of a number of frames where each frame stands
  for an active procedure call that is not a tail call.  A
  continuation mark is then a key-value pair associated with a frame,
  with keys compared using &lt;code>eq?&lt;/code>.
  At most one mark for a given key can be attached to a single frame.
&lt;/p>

&lt;p>
  Besides stack inspection, continuation marks can be used to
  implement dynamic scope, delimited continuations, or delayed
  evaluation that is able to handle iterative lazy algorithms.
&lt;/p>
&lt;p>
  This SRFI proposes to add continuation marks to the Scheme
  programming language.  The interface defined here is modelled after
  Racket's continuation marks.  It does not include all forms and
  procedures provided by Racket but provides a compatible subset.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 29 Jun 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 237: R6RS Records (refined)</title><link>https://srfi.schemers.org/srfi-237/</link><guid>https://srfi.schemers.org/srfi-237</guid><description>SRFI 237 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>The record mechanism of R&lt;sup>6&lt;/sup>RS is refined.  In
      particular, the triad of record names, record-type descriptors
      and record constructor descriptors can be effectively ignored
      and replaced with the single notion of a record descriptor.  We
      also remove the restriction that the syntactic layer can only
      define one constructor per record type defined.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 02 May 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 240: Reconciled Records</title><link>https://srfi.schemers.org/srfi-240/</link><guid>https://srfi.schemers.org/srfi-240</guid><description>SRFI 240 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI defines a version of
      the &lt;code>define-record-type&lt;/code> definition
      of &lt;code>R&lt;sup>6&lt;/sup>RS&lt;/code>
      and &lt;a href="https://srfi.schemers.org/srfi-237/">SRFI
      237&lt;/a> that extends the &lt;code>define-record-type&lt;/code> syntax
      of &lt;code>R&lt;sup>7&lt;/sup>RS&lt;/code>, reconciling both systems.&lt;/p>

    &lt;p>This SRFI is meant to be adopted by R&lt;sup>7&lt;/sup>RS-large to
      integrate essentially the R&lt;sup>6&lt;/sup>RS record system
      compatibly with the existing R&lt;sup>7&lt;/sup>RS-small record
      system.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 02 May 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 153: Ordered Sets</title><link>https://srfi.schemers.org/srfi-153/</link><guid>https://srfi.schemers.org/srfi-153</guid><description>SRFI 153 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>&lt;em>Osets&lt;/em> are immutable collections that can contain any Scheme objects as long as a total order exists among the objects.  Osets enforce the constraint that no two elements can be the same in the sense of the oset's associated &lt;em>equality predicate&lt;/em>. The elements in an oset appear in a fixed order determined by the comparator used to create it.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Mon, 01 May 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 226: Control Features</title><link>https://srfi.schemers.org/srfi-226/</link><guid>https://srfi.schemers.org/srfi-226</guid><description>SRFI 226 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>Whenever an expression is evaluated during the run of a Scheme program,
    there is a continuation awaiting the values of the expression. It is a
    distinguishing property of the Scheme programming language to offer a
    procedure (named &lt;code>call/cc&lt;/code>) that captures the current
    continuation as a procedure, which, when called, aborts the then-current
    continuation and reinstates the captured one.&lt;/p>

    &lt;p>One can visualize a continuation as a list of (continuation) frames
      where a non-tail call adds a frame to the top of the list and where the return
      from a non-tail call removes the appropriate frame.&lt;/p>

    &lt;p>Moreover, each expression is evaluated in a dynamic environment that
      conceptually holds the values of parameters like the current output port
      and the dynamic-wind stack at the point of evaluation.  As the dynamic
      environment is captured and reinstated along the continuation when the
      &lt;code>call/cc&lt;/code> machinery is used, we can view it conceptually as
      part of the continuation.&lt;/p>

    &lt;p>The libraries defined in this SRFI are all concerned with continuations
      in a wider sense. More specifically, the topics are as follows:&lt;/p>

    &lt;dl>

    &lt;dt>Continuation Prompts&lt;/dt>&lt;dd> A continuation prompt is a special
    continuation frame that is tagged with a so-called prompt tag. Procedures
    to install continuation prompts and to abort the current continuation and
    escape back to a previously installed continuation prompt are
    provided. Moreover, continuation prompts are equipped with handlers that
    are invoked when a continuation is aborted to them.&lt;/dd>

    &lt;dt>Continuations&lt;/dt>&lt;dd> When continuations are captured, the list of
    captured continuation frames is always delimited by some continuation
    prompt. This extends the semantics of Scheme’s
    &lt;code>call-with-current-continuation&lt;/code>.  Moreover, a
    procedure to capture so-called composable continuations is
    provided. As opposed to continuations captured
    by &lt;code>call-with-current-continuation&lt;/code>, invoking a
    composable continuation does not abort the then-current
    continuation, so composable continuations behave like ordinary
    procedures.  Together with continuation prompts, composable
    continuations allow one to implement the various proposed sets of
    control operators for delimited continuations. Finally, a
    primitive (&lt;code>call-in-continuation&lt;/code>) is provided that
    allows calling a procedure in a given continuation instead of just
    delivering values to it.&lt;/dd>

    &lt;dt>Continuation Marks&lt;/dt>&lt;dd> Continuation marks are a provided feature
      that allows one to attach arbitrary information to continuation frames
      that is captured and reinstated along with the rest of the
      continuation. Conceptually, exception handlers and parameters are
      implemented in terms of continuation marks, but the syntax and procedures
      defined in this SRFI allow the user to use them in more general
      ways. Moreover, they reify the notion of a tail call, allowing one, for
      example, to test for tail context.&lt;/dd>

    &lt;dt>Exceptions&lt;/dt>&lt;dd> The exception mechanism
    of &lt;a href="#sperber">&lt;cite>R6RS&lt;/cite>&lt;/a>
    and &lt;a href="#shinn">&lt;cite>R7RS&lt;/cite>&lt;/a> is reinterpreted with
    respect to the concepts introduced in this SRFI.  (Here, and in what follows
    we mean the so-called small language when we speak about &lt;cite>R7RS&lt;/cite>.)
    Moreover, the
    &lt;code>with-exception-handler&lt;/code> procedure and the &lt;code>guard&lt;/code>
    syntax gain additional tail-context guarantees.&lt;/dd>

    &lt;dt>Parameters&lt;/dt>&lt;dd> The parameter object mechanism
    of &lt;a href="#feeley2">&lt;cite>SRFI 39&lt;/cite>&lt;/a>
    and &lt;cite>R7RS&lt;/cite> is reinterpreted with respect to the
    concepts introduced in this SRFI.  Procedures to retrieve the
    current parameterization and to reinstall it later are
    provided. Moreover, the &lt;code>parameterize&lt;/code> syntax gains an
    additional tail-context guarantee.  To support an alternative
    model of parameters that is linked to the dynamic extent and not
    to the current parameterization, the notion of a parameter-like
    object and the &lt;code>temporarily&lt;/code> syntax are introduced.&lt;/dd>

    &lt;dt>Fluids&lt;/dt>&lt;dd> Fluids are a syntactic reinterpretation of parameter
      objects.&lt;/dd>

    &lt;dt>Delayed evaluation&lt;/dt>&lt;dd> The syntax and procedures on delayed
      evaluation of &lt;cite>R7RS&lt;/cite> are revisited and redefined to handle the
      following satisfactorily: the parameterization of the delayed expression
      being forced, the treatment of exceptions raised during forcing of
      delayed expressions, and iterative lazy algorithms. Moreover, their
      semantics are detailed with respect to the concepts introduced in this
      SRFI, and promises can naturally deliver an arbitrary number of values
      when being forced. Finally, the initial continuation of a delayed
      expression being forced is defined in a way that makes it interchangeable
      with the initial continuation of a thread.&lt;/dd>

    &lt;dt>Threads&lt;/dt>&lt;dd> The thread mechanism
      of &lt;a href="#feeley1">&lt;cite>SRFI 18&lt;/cite>&lt;/a> is detailed with
      respect to the concepts introduced in this SRFI.  In particular,
      mutation of parameter objects in multi-threaded applications is
      specified.  In order to support timeout arguments in a type-safe
      way, a minimal API on time objects is included as well.&lt;/dd>&lt;/dl>

    &lt;p>Large parts of this SRFI have been inspired by the control operators
      provided by &lt;a href="#racket">&lt;cite>Racket&lt;/cite>&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 25 Apr 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 241: Match — Simple Pattern-Matching Syntax to Express Catamorphisms on Scheme Data</title><link>https://srfi.schemers.org/srfi-241/</link><guid>https://srfi.schemers.org/srfi-241</guid><description>SRFI 241 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>
      This SRFI describes a simple pattern matcher based on one
      originally devised by Kent Dybvig, Dan Friedman, and Eric
      Hilsdale, which has a catamorphism feature to perform recursion
      automatically.
    &lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 23 Mar 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 235: Combinators</title><link>https://srfi.schemers.org/srfi-235/</link><guid>https://srfi.schemers.org/srfi-235</guid><description>SRFI 235 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI contains various procedures that accept and return procedures,
as well as a few others, drawn from
&lt;a href="https://wiki.call-cc.org/eggref/4/combinators">an earlier version of Chicken&lt;/a>.
Common Lisp has a few of them too, and more come from
&lt;a href="https://programmingpraxis.com/contents/standard-prelude/">the Standard Prelude from &lt;em>Programming Praxis&lt;/em>&lt;/a>.
Using these procedures helps to keep code terse
and reduce the need for ad hoc lambdas.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (spec) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Tue, 28 Feb 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 244: Multiple-value Definitions</title><link>https://srfi.schemers.org/srfi-244/</link><guid>https://srfi.schemers.org/srfi-244</guid><description>SRFI 244 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>A &lt;code>define-values&lt;/code> form is a definition that binds
      multiple variables from a single expression returning multiple
      values.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 05 Feb 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 239: Destructuring Lists</title><link>https://srfi.schemers.org/srfi-239/</link><guid>https://srfi.schemers.org/srfi-239</guid><description>SRFI 239 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI provides the &lt;code>list-case&lt;/code>, the
      syntactic fundamental list destructor.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Mon, 23 Jan 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 238: Codesets</title><link>https://srfi.schemers.org/srfi-238/</link><guid>https://srfi.schemers.org/srfi-238</guid><description>SRFI 238 is now in &lt;em>final&lt;/em> status.&lt;blockquote>  &lt;p>Many programming interfaces rely on a set of condition codes
  where each code has a numeric ID, a mnemonic symbol, and a
  human-readable message. This SRFI defines a facility to translate
  between numbers and symbols in a codeset and to fetch messages by
  code. Examples are given using the Unix &lt;em>errno&lt;/em> and
  &lt;em>signal&lt;/em> codesets.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Mon, 16 Jan 2023 12:00:00 -0800</pubDate></item><item><title>SRFI 228: Composing Comparators</title><link>https://srfi.schemers.org/srfi-228/</link><guid>https://srfi.schemers.org/srfi-228</guid><description>SRFI 228 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Further procedures for defining &lt;a href="https://srfi.schemers.org/srfi-128/">SRFI 128&lt;/a> comparators.

&lt;/p>&lt;p>Best enjoyed in combination with &lt;a href="https://srfi.schemers.org/srfi-162/">SRFI 162&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Daphne Preston-Kendal</dc:creator><pubDate>Sat, 10 Dec 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 236: Evaluating expressions in an unspecified order</title><link>https://srfi.schemers.org/srfi-236/</link><guid>https://srfi.schemers.org/srfi-236</guid><description>SRFI 236 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines the &lt;code>independently&lt;/code> syntax, which can be
    used to combine side effects into one expression without
    specifying their relative order.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 22 Nov 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 233: INI files</title><link>https://srfi.schemers.org/srfi-233/</link><guid>https://srfi.schemers.org/srfi-233</guid><description>SRFI 233 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>An INI file is a configuration file that consists of key-value
pairs for properties, and sections that group the properties. The
name of these configuration files comes from the filename extension
&lt;code>INI&lt;/code>, short for initialization.
The format has become an informal standard in many contexts of configuration.
This SRFI provides access to the contents of an INI file.
&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (spec) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Thu, 13 Oct 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 225: Dictionaries</title><link>https://srfi.schemers.org/srfi-225/</link><guid>https://srfi.schemers.org/srfi-225</guid><description>SRFI 225 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>The procedures of this SRFI allow callers to manipulate an object that maps keys to values
  without the caller needing to know exactly what the type of the object is.
  Such an object is called a &lt;em>dictionary&lt;/em> or &lt;em>dict&lt;/em> in this SRFI.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (spec) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Tue, 27 Sep 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 122: Nonempty Intervals and Generalized Arrays</title><link>https://srfi.schemers.org/srfi-122/</link><guid>https://srfi.schemers.org/srfi-122</guid><description>SRFI 122 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies an array mechanism for
      Scheme. Arrays as defined here are quite general; at their most basic, an
      array is simply a mapping, or function, from multi-indices of exact
      integers $i_0,\ldots,i_{d-1}$ to Scheme values. The set of multi-indices
      $i_0,\ldots,i_{d-1}$ that are valid for a given array form the
      &lt;i>domain&lt;/i> of the array. In this SRFI, each array's domain consists of
      a rectangular interval
      $[l_0,u_0)\times[l_1,u_1)\times\cdots\times[l_{d-1},u_{d-1})$, a subset
      of $\mathbb Z^d$, $d$-tuples of integers. Thus, we introduce a data type
      called &lt;i>intervals&lt;/i>, which encapsulate the cross product of nonempty
      intervals of exact integers. Specialized variants of arrays are specified
      to provide portable programs with efficient representations for common
      use cases.&lt;/p>&lt;/blockquote></description><dc:creator>Bradley J. Lucier</dc:creator><pubDate>Sun, 25 Sep 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 231: Intervals and Generalized Arrays</title><link>https://srfi.schemers.org/srfi-231/</link><guid>https://srfi.schemers.org/srfi-231</guid><description>SRFI 231 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI specifies an array mechanism for Scheme. Arrays as defined here are quite general; at their most basic, an array is simply a mapping, or function, from multi-indices of exact integers $i_0,\ldots,i_{d-1}$ to Scheme values.  The set of multi-indices $i_0,\ldots,i_{d-1}$ that are valid for a given array form the &lt;i>domain&lt;/i> of the array.  In this SRFI, each array's domain consists  of the cross product of intervals of exact integers $[l_0,u_0)\times[l_1,u_1)\times\cdots\times[l_{d-1},u_{d-1})$ of $\mathbb Z^d$, $d$-tuples of integers.  Thus, we introduce a data type called $d$-&lt;i>intervals&lt;/i>, or more briefly &lt;a href="https://en.wikipedia.org/w/index.php?title=Interval_(mathematics)&amp;amp;oldid=1091935326">&lt;i>intervals&lt;/i>&lt;/a>, that encapsulates this notion. (We borrow this terminology from, e.g.,  Elias Zakon's &lt;a href="http://www.trillia.com/zakon1.html">Basic Concepts of Mathematics&lt;/a>.) Specialized variants of arrays provide portable programs with efficient representations for common use cases.&lt;/p>
    &lt;p>This is a revised and improved version of &lt;a href="https://srfi.schemers.org/srfi-179/">SRFI 179&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Bradley J. Lucier</dc:creator><pubDate>Sun, 25 Sep 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 200: Pattern Matching</title><link>https://srfi.schemers.org/srfi-200/</link><guid>https://srfi.schemers.org/srfi-200</guid><description>SRFI 200 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI discusses some of the existing pattern-matching
  libraries for the Scheme programming language &amp;amp;mdash; namely,
  the pattern matcher presented by Andrew K. Wright and Robert
  Cartwright in the paper "A Soft Type System for Scheme", the
  pattern matcher developed by Dan Friedman, Erik Hilsdale and
  Kent Dybvig, the &lt;code>racket/match&lt;/code> module
  distributed with the Racket programming environment, as well
  as the Bigloo and Gerbil pattern matchers distributed with
  their respective implementations.
  It then extracts a pattern syntax which is compatible with three of
  those implementations and provides extrinsic rationale for that
  syntax.
  It also provides a simple implementation of a pattern matcher
  which conforms to the specification of a pattern language provided
  in this document.&lt;/p>&lt;/blockquote></description><dc:creator>Panicz Maciej Godek</dc:creator><pubDate>Sat, 23 Jul 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 211: Scheme Macro Libraries</title><link>https://srfi.schemers.org/srfi-211/</link><guid>https://srfi.schemers.org/srfi-211</guid><description>SRFI 211 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI describes common syntactic extensions of the &lt;code>syntax-rules&lt;/code> macro facility of R5RS and the base R6RS and R7RS libraries.  In particular,
      library namespaces are defined where these extensions can be located
      and which can be tested against in &lt;code>cond-expand&lt;/code> forms.
    &lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 19 Jul 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 232: Flexible curried procedures</title><link>https://srfi.schemers.org/srfi-232/</link><guid>https://srfi.schemers.org/srfi-232</guid><description>SRFI 232 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Scheme lacks a flexible way to create and apply curried procedures.
This SRFI describes &lt;code>curried&lt;/code>, a variant of
&lt;code>lambda&lt;/code> that creates true curried procedures which also
behave just like ordinary Scheme procedures.  They can be applied to
their arguments one by one, all at once, or anywhere in between,
without any novel syntax.  &lt;code>curried&lt;/code> also supports
nullary and variadic procedures, and procedures created with it have
predictable behavior when applied to surplus arguments.&lt;/p>&lt;/blockquote></description><dc:creator>Wolfgang Corcoran-Mathe</dc:creator><pubDate>Wed, 06 Apr 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 205: POSIX Terminal Fundamentals</title><link>https://srfi.schemers.org/srfi-205/</link><guid>https://srfi.schemers.org/srfi-205</guid><description>SRFI 205 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>
This SRFI describes procedures for command-line and terminal interface
programs to safely change and reset terminal modes, for example from
cooked to raw and back, and for serial-line device manipulation for
interfacing with embedded hardware and the like.
&lt;/p>
&lt;p>
It is intended to provide all the
&lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/termios.h.html">termios structure&lt;/a>
functionality a modern Scheme programmer might desire by supplying a
&lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/stty.html">stty&lt;/a>
procedure, and simple abstractions on top of it.
&lt;/p>
&lt;/blockquote></description><dc:creator>John Cowan and Harold Ancell</dc:creator><pubDate>Mon, 21 Mar 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 204: Wright-Cartwright-Shinn Pattern Matcher</title><link>https://srfi.schemers.org/srfi-204/</link><guid>https://srfi.schemers.org/srfi-204</guid><description>SRFI 204 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Pattern matching decomposes a compound data structure
into parts and assigns those parts to variables. This
SRFI describes a pattern-matching library already in use by
several scheme implementations which can match many common
compound data structures.&lt;/p>&lt;/blockquote></description><dc:creator>Felix Thibault</dc:creator><pubDate>Wed, 02 Feb 2022 12:00:00 -0800</pubDate></item><item><title>SRFI 227: Optional Arguments</title><link>https://srfi.schemers.org/srfi-227/</link><guid>https://srfi.schemers.org/srfi-227</guid><description>SRFI 227 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI specifies the &lt;code>opt-lambda&lt;/code> syntax, which
      generalizes &lt;code>lambda&lt;/code>.  An &lt;code>opt-lambda&lt;/code> expression
      evaluates to a procedure that takes a number of required and a number of
      optional (positional) arguments whose default values are determined by
      evaluating corresponding expressions when the procedure is called.&lt;/p>

    &lt;p>This SRFI also specifies a variation &lt;code>opt*-lambda&lt;/code>, which is
      to &lt;code>opt-lambda&lt;/code> as &lt;code>let*&lt;/code> is to &lt;code>let&lt;/code>
      and the related binding constructs &lt;code>let-optionals&lt;/code>
      and &lt;code>let-optionals*&lt;/code>.&lt;/p>

    &lt;p>Finally, for those who prefer less explicit procedure
      definitions, a sublibrary provides &lt;code>define-optionals&lt;/code>
      and &lt;code>define-optionals*&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen (spec and R6RS implementation) and Daphne Preston-Kendal (R7RS implementation)</dc:creator><pubDate>Tue, 16 Nov 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 229: Tagged Procedures</title><link>https://srfi.schemers.org/srfi-229/</link><guid>https://srfi.schemers.org/srfi-229</guid><description>SRFI 229 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI defines &lt;dfn>tagged procedures&lt;/dfn>, which are procedures
      that are tagged with a Scheme value when created through the
      syntax &lt;code>lambda/tag&lt;/code> and &lt;code>case-lambda/tag&lt;/code>.  The
      value of the tag of a procedure can be retrieved
      with &lt;code>procedure-tag&lt;/code>, and the
      predicate &lt;code>procedure/tag?&lt;/code> discerns whether a procedure is
      tagged.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Mon, 15 Nov 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 230: Atomic Operations</title><link>https://srfi.schemers.org/srfi-230/</link><guid>https://srfi.schemers.org/srfi-230</guid><description>SRFI 230 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>This SRFI defines atomic operations for the Scheme programming language.
      An &lt;dfn>atomic operation&lt;/dfn> is an operation that, even in the presence
      of multiple threads, is either executed completely or not at all.  Atomic
      operations can be used to implement mutexes and other synchronization
      primitives, and they can be used to make concurrent algorithms lock-free.
      For this, this SRFI defines two data types, &lt;dfn>atomic flags&lt;/dfn>
      and &lt;dfn>atomic (fixnum) boxes&lt;/dfn>, whose contents can be queried and
      mutated atomically.  Moreover, each atomic operation comes with
      a &lt;dfn>memory order&lt;/dfn> that defines the level of synchronization with
      other threads.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Mon, 15 Nov 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 254: Ephemerons and Guardians</title><link>https://srfi.schemers.org/srfi-254/</link><guid>https://srfi.schemers.org/srfi-254</guid><description>SRFI 254 is now in &lt;em>draft&lt;/em> status.&lt;blockquote>&lt;p>Guardians allow programs to protect objects from deallocation by the garbage collector and to determine which objects would otherwise have been deallocated. When the object has associated non-memory resources, a program can register it with a guardian. The GC will mark inaccessible objects but will not collect them; at the program's convenience, inaccessible objects are removed from the guardian and their non-memory resources are disposed of.

Guardians allow objects to be saved from deallocation indefinitely so that they can be reused or so that clean-up or other actions can be performed using the data stored within the objects. Guardians avoid the problems associated with classical finalizers detailed in the Rationale section.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sat, 11 Sep 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 223: Generalized binary search procedures</title><link>https://srfi.schemers.org/srfi-223/</link><guid>https://srfi.schemers.org/srfi-223</guid><description>SRFI 223 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Generalized procedures for binary search of vector-like data structures are provided which can be applied to any sequence type, including ones defined by the user, together with applications of these procedures for Scheme’s built-in vectors.&lt;/p>&lt;/blockquote></description><dc:creator>Daphne Preston-Kendal</dc:creator><pubDate>Tue, 27 Jul 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 222: Compound Objects</title><link>https://srfi.schemers.org/srfi-222/</link><guid>https://srfi.schemers.org/srfi-222</guid><description>SRFI 222 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Compound objects are analogous to R6RS compound conditions,
and are suitable for use in creating and handling conditions
on non-R6RS systems, among other purposes.
They encapsulate an immutable sequence of subobjects, which can be
any object except another compound object.
It is possible to implement R6RS compound conditions on top of
compound objects, but not vice versa.
Note that this SRFI does not provide any analogue to R6RS
&lt;i>simple&lt;/i> conditions, which are just records.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Tue, 20 Jul 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 224: Integer Mappings</title><link>https://srfi.schemers.org/srfi-224/</link><guid>https://srfi.schemers.org/srfi-224</guid><description>SRFI 224 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Integer maps, or &lt;em>fxmappings&lt;/em>, are finite sets, where each element is
an association between a fixnum (exact integer) key and an arbitrary Scheme
object.  They are similar to the general mappings of
&lt;a href="https://srfi.schemers.org/srfi-146/">SRFI
146&lt;/a>, but the restricted key-type allows implementations of
fxmappings to benefit from optimized structures and algorithms.  This
library provides a rich set of operations on fxmappings, including
analogues of most of the forms provided by SRFI 146.  Fxmappings have
no intrinsic order, but may be treated as ordered sets, using the
natural ordering on keys; a substantial sublibrary for working with
fxmappings in this fashion is included.&lt;/p>&lt;/blockquote></description><dc:creator>Wolfgang Corcoran-Mathe</dc:creator><pubDate>Wed, 30 Jun 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 221: Generator/accumulator sub-library</title><link>https://srfi.schemers.org/srfi-221/</link><guid>https://srfi.schemers.org/srfi-221</guid><description>SRFI 221 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This is a set of convenience routines for generators and accumulators
intended to blend in with
&lt;a href="https://srfi.schemers.org/srfi-158/srfi-158.html">SRFI 158&lt;/a>.
The authors recommend that they be added to the
&lt;code>(srfi 158)&lt;/code> library provided by
users or implementations.
If they are approved by the R7RS-large process,
they can also be added to &lt;code>(r7rs generator)&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Fri, 28 May 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 220: Line directives</title><link>https://srfi.schemers.org/srfi-220/</link><guid>https://srfi.schemers.org/srfi-220</guid><description>SRFI 220 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>  &lt;p>Many language-agnostic programming tools rely on specially
  formatted source code comments to annotate the code with
  metadata. Such "magic comments" are hard for both humans and
  computers to parse reliably, as the purpose of a comment is to be
  free-form text that is not interpreted by machine.&lt;/p>
  &lt;p>This SRFI extends the standard Scheme directive syntax
  (&lt;code>#!&lt;/code>) to support &lt;em>line directives&lt;/em>. They look
  like magic comments to language-agnostic tools but read as
  S-expressions in Scheme, combining the portability of magic
  comments with the well-defined syntax and easy parsing of
  ordinary Scheme code.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Tue, 20 Apr 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 219: Define higher-order lambda</title><link>https://srfi.schemers.org/srfi-219/</link><guid>https://srfi.schemers.org/srfi-219</guid><description>SRFI 219 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI codifies the following shorthand syntax, which some
  Scheme implementations have had for a long time.&lt;/p>
  &lt;pre>(define ((outer-name outer-args ...) inner-args ...)
  inner-body ...)&lt;/pre>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Sun, 04 Apr 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 213: Identifier Properties</title><link>https://srfi.schemers.org/srfi-213/</link><guid>https://srfi.schemers.org/srfi-213</guid><description>SRFI 213 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Using the &lt;code>define-property&lt;/code> definition described in
  this SRFI, expand-time properties can be associated with
  identifiers in a referentially transparent and lexically scoped way.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 21 Mar 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 214: Flexvectors</title><link>https://srfi.schemers.org/srfi-214/</link><guid>https://srfi.schemers.org/srfi-214</guid><description>SRFI 214 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>A &lt;em>flexvector&lt;/em>, also known as a dynamic array or an arraylist, is a mutable vector-like data structure with an adjustable size. Flexvectors allow fast random access and fast insertion/removal at the end. This SRFI defines a suite of operations on flexvectors, modeled after &lt;a href="https://srfi.schemers.org/srfi-133/srfi-133.html">SRFI 133&lt;/a>'s vector operations.&lt;/p>&lt;/blockquote></description><dc:creator>Adam Nelson</dc:creator><pubDate>Thu, 18 Mar 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 208: NaN procedures</title><link>https://srfi.schemers.org/srfi-208/</link><guid>https://srfi.schemers.org/srfi-208</guid><description>SRFI 208 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI provides procedures that dissect NaN (Not a Number) inexact values.&lt;/p>&lt;/blockquote></description><dc:creator>Emmanuel Medernach (design), John Cowan (editor), and Wolfgang Corcoran-Mathe (implementation)</dc:creator><pubDate>Tue, 23 Feb 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 217: Integer Sets</title><link>https://srfi.schemers.org/srfi-217/</link><guid>https://srfi.schemers.org/srfi-217</guid><description>SRFI 217 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Integer sets, or &lt;em>iset&lt;/em>s, are unordered collections of
fixnums.  (Fixnums are exact integers within certain
implementation-specified bounds.)&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Wolfgang Corcoran-Mathe (implementation)</dc:creator><pubDate>Mon, 15 Feb 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 210: Procedures and Syntax for Multiple Values</title><link>https://srfi.schemers.org/srfi-210/</link><guid>https://srfi.schemers.org/srfi-210</guid><description>SRFI 210 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
  This SRFI extends the Scheme standard with procedures and syntax
  dealing with multiple values, including syntax to create lists and
  vectors from expressions returning multiple values and procedures
  returning the elements of a list or vector as multiple values.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Fri, 12 Feb 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 212: Aliases</title><link>https://srfi.schemers.org/srfi-212/</link><guid>https://srfi.schemers.org/srfi-212</guid><description>SRFI 212 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI introduces &lt;em>alias definitions&lt;/em>, a syntactic
extension.  An alias definition transfers the binding of one
identifier to another, effectively aliasing the identifier.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Fri, 12 Feb 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 218: Unicode Numerals</title><link>https://srfi.schemers.org/srfi-218/</link><guid>https://srfi.schemers.org/srfi-218</guid><description>SRFI 218 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>These procedures allow the creation and interpretation of numerals
using any set of Unicode digits that support positional notation.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Arvydas Silanskas (implementation)</dc:creator><pubDate>Sat, 30 Jan 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 216: SICP Prerequisites (Portable)</title><link>https://srfi.schemers.org/srfi-216/</link><guid>https://srfi.schemers.org/srfi-216</guid><description>SRFI 216 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
   This SRFI follows
    &lt;a href="https://srfi.schemers.org/srfi-203/">
     SRFI 203
    &lt;/a>
   in providing "out-of-the-box" support for hosting the exercises suggested by
    &lt;a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">
     Structure and Interpretation of Computer Programs
    &lt;/a>
   in portable Scheme.
&lt;/p>

&lt;p>
Whereas SRFI 203 focused on the necessarily non-portable aspects of the problem set (the graphics), this SRFI aims to provide support for the rest of the features, which are far more widespread, often already provided, and in reality mostly need just a common vocabulary.
&lt;/p>

&lt;p>
This SRFI provides procedures for working with time data, multi-threading, and streams, as well as SICP names for &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.
&lt;/p>

&lt;p>
None of these procedures is fit for production use.  They are only designed for pedagogical purposes.
&lt;/p>

&lt;p>
Students, however, are expected to be able to just write&lt;/p>
 &lt;pre>
 (include (srfi sicp))&lt;/pre>
 &lt;p>and have the code from the book run without problems (apart from those intended by the book authors).
&lt;/p>&lt;/blockquote></description><dc:creator>Vladimir Nikishkin</dc:creator><pubDate>Thu, 21 Jan 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 201: Syntactic Extensions to the Core Scheme Bindings</title><link>https://srfi.schemers.org/srfi-201/</link><guid>https://srfi.schemers.org/srfi-201</guid><description>SRFI 201 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This document describes a handful of syntactic extensions
  to the core bindings of the Scheme programming language.
  In particular, it proposes to extend the binding forms
  &lt;code>lambda&lt;/code>, &lt;code>let&lt;/code>,
  &lt;code>let*&lt;/code> with pattern matching capabilities, to extend the forms &lt;code>let&lt;/code>
  and &lt;code>or&lt;/code> with the ability
  to handle multiple values, and to extend the form &lt;code>define&lt;/code> with
  the ability of defining "curried" functions.&lt;/p>&lt;/blockquote></description><dc:creator>Panicz Maciej Godek</dc:creator><pubDate>Wed, 13 Jan 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 215: Central Log Exchange</title><link>https://srfi.schemers.org/srfi-215/</link><guid>https://srfi.schemers.org/srfi-215</guid><description>SRFI 215 is now in &lt;em>final&lt;/em> status.&lt;blockquote>    &lt;p>
      This SRFI specifies a central log exchange for Scheme that
      connects log producers with log consumers. It allows multiple
      logging systems to interoperate and co-exist in the same
      program. Library code can produce log messages without knowledge
      of which log system is actually used. Simple applications can
      easily get logs on standard output, while more advanced
      applications can send them to a full logging system.
    &lt;/p>&lt;/blockquote></description><dc:creator>Göran Weinholt</dc:creator><pubDate>Mon, 11 Jan 2021 12:00:00 -0800</pubDate></item><item><title>SRFI 206: Auxiliary Syntax Keywords</title><link>https://srfi.schemers.org/srfi-206/</link><guid>https://srfi.schemers.org/srfi-206</guid><description>SRFI 206 is now in &lt;em>final&lt;/em> status.&lt;blockquote>This SRFI defines a mechanism for defining auxiliary syntax
keywords independently in different modules in such a way that
they still have the same binding so that they can be used
interchangeably as literal identifiers in
&lt;code>syntax-rules&lt;/code> and &lt;code>syntax-case&lt;/code> expressions
and can be both imported under the same name without conflicts.&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Mon, 21 Dec 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 209: Enums and Enum Sets</title><link>https://srfi.schemers.org/srfi-209/</link><guid>https://srfi.schemers.org/srfi-209</guid><description>SRFI 209 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Enums are objects that serve to form sets of distinct classes
that specify different modes of operation for a procedure.
Their use fosters portable and readable code.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Wolfgang Corcoran-Mathe (implementation)</dc:creator><pubDate>Thu, 17 Dec 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 202: Pattern-matching Variant of the and-let* Form that Supports Multiple Values</title><link>https://srfi.schemers.org/srfi-202/</link><guid>https://srfi.schemers.org/srfi-202</guid><description>SRFI 202 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>The SRFI-2 library introduced the &lt;code>and-let*&lt;/code> form
  for short-circuited evaluation in the style of the &lt;code>and&lt;/code>
  form, with the ability to capture the (non-&lt;code>#f&lt;/code>) results
  in the style of the &lt;code>let*&lt;/code> form.  This document extends
  the &lt;code>and-let*&lt;/code> form with the ability to pattern-match (or
  "destructurally bind") the values of evaluated expressions (where
  the match failure causes short-circuiting rather than raising an
  error) and the ability to handle multiple values (where only the
  falsehood of the first value causes short-circuiting).
&lt;/p>&lt;/blockquote></description><dc:creator>Panicz Maciej Godek</dc:creator><pubDate>Sat, 28 Nov 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 207: String-notated bytevectors</title><link>https://srfi.schemers.org/srfi-207/</link><guid>https://srfi.schemers.org/srfi-207</guid><description>SRFI 207 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>To ease the human reading and writing of Scheme code involving
binary data that for mnemonic reasons corresponds
as a whole or in part to ASCII-coded text, a notation
for bytevectors is defined which allows printable ASCII characters
to be used literally without being converted to their corresponding
integer forms. In addition, this SRFI provides a set of procedures
known as the bytestring library
for constructing a bytevector from a sequence of integers,
characters, strings, and/or bytevectors, and for manipulating
bytevectors as if they were strings as far as possible.&lt;/p>&lt;/blockquote></description><dc:creator>Daphne Preston-Kendal (external notation), John Cowan (procedure design), and Wolfgang Corcoran-Mathe (implementation)</dc:creator><pubDate>Thu, 29 Oct 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 170: POSIX API</title><link>https://srfi.schemers.org/srfi-170/</link><guid>https://srfi.schemers.org/srfi-170</guid><description>SRFI 170 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
The host environment is the set of resources, such as the filesystem,
network and processes, that are managed by the operating system on top of
which a Scheme program is executing. This SRFI specifies some of the ways the host
environment can be accessed from within a Scheme program.  It does so by
leveraging widespread support for P&lt;small>OSIX&lt;/small>, the Portable
Operating System Interface standardized by the IEEE.  Not all of the
functions of this SRFI are available on all operating systems.
&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers (original author), John Cowan (editor and shepherd), and Harold Ancell (implementer and editor)</dc:creator><pubDate>Wed, 28 Oct 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 196: Range Objects</title><link>https://srfi.schemers.org/srfi-196/</link><guid>https://srfi.schemers.org/srfi-196</guid><description>SRFI 196 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Ranges are collections somewhat similar to vectors, except that
  they are immutable and have algorithmic representations instead of
  the uniform per-element data structure of vectors. The storage required is
  usually less than the size of the same collection stored in a
  vector and the time needed to reference a particular element is
  typically less for a range than for the same collection stored in a
  list. This SRFI defines a large subset of the sequence operations
  defined on lists, vectors, strings, and other collections.  If
  necessary, a range can be converted to a list, vector, or string of
  its elements or a generator that will lazily produce each element in
  the range.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Wolfgang Corcoran-Mathe (sample implementation)</dc:creator><pubDate>Thu, 17 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 203: A Simple Picture Language in the Style of SICP</title><link>https://srfi.schemers.org/srfi-203/</link><guid>https://srfi.schemers.org/srfi-203</guid><description>SRFI 203 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI proposes a simple library for programmatic drawing of
pictures compatible with Section 2.2.4 of &lt;cite>Structure and
Interpretation of Computer Programs&lt;/cite>.&lt;/p>

&lt;p>It aims to close the gap between the Scheme suggested for study in
the book and portable Scheme.&lt;/p>&lt;/blockquote></description><dc:creator>Vladimir Nikishkin</dc:creator><pubDate>Thu, 17 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 197: Pipeline Operators</title><link>https://srfi.schemers.org/srfi-197/</link><guid>https://srfi.schemers.org/srfi-197</guid><description>SRFI 197 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Many functional languages provide pipeline operators, like Clojure's &lt;code>->&lt;/code> or OCaml's &lt;code>|>&lt;/code>. Pipelines are a simple, terse, and readable way to write deeply-nested expressions. This SRFI defines a family of &lt;code>chain&lt;/code> and &lt;code>nest&lt;/code> pipeline operators, which can rewrite nested expressions like &lt;code>(a b (c d (e f g)))&lt;/code> as a sequence of operations: &lt;code>(chain g (e f _) (c d _) (a b _))&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Adam Nelson</dc:creator><pubDate>Sat, 12 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 198: Foreign Interface Status</title><link>https://srfi.schemers.org/srfi-198/</link><guid>https://srfi.schemers.org/srfi-198</guid><description>SRFI 198 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>
This SRFI provides means to construct, return or signal, and extract
information from Scheme interfaces with "foreign" systems such as the
P&lt;small>OSIX&lt;/small> API, databases, and libraries.
&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (editor and shepherd), Harold Ancell (implementer and editor), and Lassi Kortela (architect)</dc:creator><pubDate>Sat, 12 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 193: Command line</title><link>https://srfi.schemers.org/srfi-193/</link><guid>https://srfi.schemers.org/srfi-193</guid><description>SRFI 193 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>R&lt;sup>6&lt;/sup>RS and R&lt;sup>7&lt;/sup>RS define a
&lt;code>command-line&lt;/code> procedure. While a useful baseline, the
specification is not detailed enough to cover all practical
situations. This SRFI clarifies the definition of
&lt;code>command-line&lt;/code> and adds a few related procedures.
Scheme scripts, standalone executables, compilation and REPL use
are accounted for. Option parsing is out of scope.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Thu, 10 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 181: Custom ports (including transcoded ports)</title><link>https://srfi.schemers.org/srfi-181/</link><guid>https://srfi.schemers.org/srfi-181</guid><description>SRFI 181 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI is derived from parts of
&lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-1.html#node_toc_node_sec_8.2.4">
library section 8.2.4&lt;/a>,
&lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-9.html#node_sec_8.2.7">
library section 8.2.7&lt;/a>,
&lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-9.html#node_sec_8.2.10">
library section 8.2.10&lt;/a>, and
&lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-9.html#node_sec_8.2.13">
library section 8.2.13&lt;/a>
of the R6RS.
These sections are themselves based on parts of
&lt;a href="http://srfi.schemers.org/srfi-79/srfi-79.html">SRFI 79&lt;/a>,
&lt;a href="http://srfi.schemers.org/srfi-80/srfi-80.html">SRFI 80&lt;/a> and
&lt;a href="http://srfi.schemers.org/srfi-81/srfi-81.html">SRFI 81&lt;/a>.
These procedures provide a hook into the Scheme port system from below, allowing the
creation of custom ports that behave as much as possible like the standard
file, string, and bytevector ports, but that call a procedure to produce
data to input ports or to consume data from output ports.
Procedures for creating ports that transcode
between bytes and characters are an important special
case and are also documented in this SRFI.
&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 08 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 186: Transcoders and transcoded ports</title><link>https://srfi.schemers.org/srfi-186/</link><guid>https://srfi.schemers.org/srfi-186</guid><description>SRFI 186 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This is an extract from the R6RS that documents its support for
transcoders and transcoded ports.  These provide a hook into the
Scheme port system from below, allowing the creation of textual ports
that provide non-default encoding and decoding from arbitrary binary
ports.  It has been lightly edited to fit R7RS style.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 08 Sep 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 195: Multiple-value boxes</title><link>https://srfi.schemers.org/srfi-195/</link><guid>https://srfi.schemers.org/srfi-195</guid><description>SRFI 195 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
  This SRFI extends the specification of the boxes
  of &lt;a href="https://srfi.schemers.org/srfi-111/srfi-111.html">SRFI
  111&lt;/a> so that they are multiple-values aware.  Whereas a SRFI
  111 box is limited in that it can only box a single value,
  multiple values can be boxed with this SRFI.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Fri, 28 Aug 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 194: Random data generators</title><link>https://srfi.schemers.org/srfi-194/</link><guid>https://srfi.schemers.org/srfi-194</guid><description>SRFI 194 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines a set of
&lt;a href="https://srfi.schemers.org/srfi-158/srfi-158.html">SRFI 158&lt;/a>
generators and generator makers that yield random data of specific
ranges and distributions.  It is intended to be implemented on top of
&lt;a href="https://srfi.schemers.org/srfi-27/srfi-27.html">SRFI 27&lt;/a>,
which provides the underlying source of random integers and floats.&lt;/p>&lt;/blockquote></description><dc:creator>Shiro Kawai (design), Arvydas Silanskas (implementation), John Cowan (editor and shepherd), and Linas Vepštas (implementation)</dc:creator><pubDate>Wed, 26 Aug 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 178: Bitvector library</title><link>https://srfi.schemers.org/srfi-178/</link><guid>https://srfi.schemers.org/srfi-178</guid><description>SRFI 178 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI describes a set of operations on
homogeneous bitvectors.
Operations analogous to those provided on the other homogeneous
vector types described in
&lt;a href="https://srfi.schemers.org/srfi-160/srfi-160.html">SRFI 160&lt;/a>
are provided,
along with operations analogous to the bitwise operations of
&lt;a href="https://srfi.schemers.org/srfi-151/srfi-151.html">SRFI 151&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Wolfgang Corcoran-Mathe (implementation)</dc:creator><pubDate>Tue, 25 Aug 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 159: Combinator Formatting</title><link>https://srfi.schemers.org/srfi-159/</link><guid>https://srfi.schemers.org/srfi-159</guid><description>SRFI 159 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>A library of procedures for formatting Scheme objects to text in
  various ways, and for easily concatenating, composing and extending
  these formatters efficiently without resorting to capturing and
  manipulating intermediate strings.&lt;/p>&lt;/blockquote></description><dc:creator>Alex Shinn</dc:creator><pubDate>Fri, 31 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 177: Portable keyword arguments</title><link>https://srfi.schemers.org/srfi-177/</link><guid>https://srfi.schemers.org/srfi-177</guid><description>SRFI 177 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Many Scheme implementations have keyword arguments, but they
have not been widely standardized. This SRFI defines the macros
&lt;code>lambda/kw&lt;/code> and &lt;code>call/kw&lt;/code>. They can be used
identically in every major implementation currently in use,
making it safe to use keyword arguments in portable code. The
macros expand to native keyword arguments in Schemes that have
them, letting programmers mix portable code and
implementation-specific code.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Fri, 31 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 192: Port Positioning</title><link>https://srfi.schemers.org/srfi-192/</link><guid>https://srfi.schemers.org/srfi-192</guid><description>SRFI 192 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This is an extract from the R6RS that documents its support for
positioning ports.  Binary ports can be positioned to read or write
at a specific byte; textual ports at a specific character,
although character positions can't be synthesized portably.
It has been lightly edited to fit R7RS style.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Shiro Kawai (implementation; requires a hook)</dc:creator><pubDate>Fri, 31 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 166: Monadic Formatting</title><link>https://srfi.schemers.org/srfi-166/</link><guid>https://srfi.schemers.org/srfi-166</guid><description>SRFI 166 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
  A library of procedures for formatting Scheme objects to text in
  various ways, and for easily concatenating, composing and extending
  these formatters efficiently without resorting to capturing and
  manipulating intermediate strings.&lt;/p>

&lt;p>
  This SRFI is an updated version of SRFI 159, primarily with the
  difference that state variables are hygienic.&lt;/p>

&lt;p>
Summary of differences from SRFI 159:
&lt;ul>
  &lt;li>State variables are first class and hygienic&lt;/li>
  &lt;li>Added &lt;code>written-shared&lt;/code>, &lt;code>pretty-shared&lt;/code>&lt;/li>
  &lt;li>Added &lt;code>as-italic&lt;/code>, &lt;code>as-color&lt;/code>, &lt;code>as-true-color&lt;/code>, &lt;code>on-&lt;i>color&lt;/i>&lt;/code> background variants, and &lt;code>pretty-with-color&lt;/code>&lt;/li>
  &lt;li>Added &lt;code>ambiguous-is-wide?&lt;/code> state variable and &lt;code>string-terminal-width/wide&lt;/code> utility&lt;/li>
  &lt;li>Added &lt;code>substring/width&lt;/code> state var for width-aware substring operations, with &lt;code>substring-terminal-width(/wide)&lt;/code> utilities&lt;/li>
  &lt;li>Added &lt;code>substring/preserve&lt;/code> state var used in trimming, with &lt;code>substring-terminal-preserve&lt;/code> utility&lt;/li>
  &lt;li>Added &lt;code>pretty-environment&lt;/code> state variable&lt;/li>
  &lt;li>Renamed &lt;code>as-unicode&lt;/code> to &lt;code>terminal-aware&lt;/code>&lt;/li>
  &lt;li>Restored non-uniform comma rules as needed in India&lt;/li>
  &lt;li>Restored &lt;code>upcased&lt;/code> and &lt;code>downcased&lt;/code>&lt;/li>
  &lt;li>Several clarifications and more examples&lt;/li>
&lt;/ul>&lt;/p>&lt;/blockquote></description><dc:creator>Alex Shinn</dc:creator><pubDate>Thu, 30 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 199: POSIX errno manipulation</title><link>https://srfi.schemers.org/srfi-199/</link><guid>https://srfi.schemers.org/srfi-199</guid><description>SRFI 199 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>The majority of P&lt;small>OSIX&lt;/small> system and library calls
  require accessing &lt;code>errno&lt;/code> to discern the specific cause
  of an error, and some require setting it to 0 before being called.
  This SRFI specifies procedures to both retrieve its value, and to
  set it.
&lt;/p>&lt;/blockquote></description><dc:creator>Harold Ancell</dc:creator><pubDate>Sun, 19 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 189: Maybe and Either: optional container types</title><link>https://srfi.schemers.org/srfi-189/</link><guid>https://srfi.schemers.org/srfi-189</guid><description>SRFI 189 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines two disjoint immutable container types
known as Maybe and Either,
both of which can contain objects collectively known as their payload.
A Maybe object is either a Just object or the unique object Nothing
(which has no payload); an Either object is either
a Right object or a Left object.  Maybe represents the concept of
optional values; Either represents the concept of values which are
either correct (Right) or errors (Left).&lt;/p>
&lt;p>Note that the terms Maybe, Just, Nothing, Either, Right, and Left
are capitalized in this SRFI so as not to be confused with their
ordinary use as English words.  Thus "returns Nothing" means
"returns the unique Nothing object"; "returns nothing" could be
interpreted as "returns no values"
or "returns an unspecified value".&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan (text) and Wolfgang Corcoran-Mathe (sample implementation)</dc:creator><pubDate>Tue, 14 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 191: Procedure Arity Inspection</title><link>https://srfi.schemers.org/srfi-191/</link><guid>https://srfi.schemers.org/srfi-191</guid><description>SRFI 191 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Many Scheme systems provide mechanisms for inspecting the arity of a
procedural value, making it a common feature, however there is no
standard interface.  As a result there is no portable way to observe
the arity of a procedure without actually applying it.  This
SRFI proposes a simple interface that is consistent with existing
Scheme systems' facilities and prior proposals.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sun, 05 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 180: JSON</title><link>https://srfi.schemers.org/srfi-180/</link><guid>https://srfi.schemers.org/srfi-180</guid><description>SRFI 180 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This library describes a JavaScript Object Notation (JSON) parser and printer.  It supports JSON that may be bigger than memory.&lt;/p>&lt;/blockquote></description><dc:creator>Amirouche Boubekki</dc:creator><pubDate>Wed, 01 Jul 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 179: Nonempty Intervals and Generalized Arrays (Updated)</title><link>https://srfi.schemers.org/srfi-179/</link><guid>https://srfi.schemers.org/srfi-179</guid><description>SRFI 179 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI specifies an array mechanism for Scheme. Arrays as defined here are quite general; at their most basic, an array is simply a mapping, or function, from multi-indices of exact integers $i_0,\ldots,i_{d-1}$ to Scheme values.  The set of multi-indices $i_0,\ldots,i_{d-1}$ that are valid for a given array form the &lt;i>domain&lt;/i> of the array.  In this SRFI, each array's domain consists  of the cross product of nonempty intervals of exact integers $[l_0,u_0)\times[l_1,u_1)\times\cdots\times[l_{d-1},u_{d-1})$ of $\mathbb Z^d$, $d$-tuples of integers.  Thus, we introduce a data type called $d$-&lt;i>intervals&lt;/i>, or more briefly &lt;i>intervals&lt;/i>, that encapsulates this notion. (We borrow this terminology from, e.g.,  Elias Zakon's &lt;a href="http://www.trillia.com/zakon1.html">Basic Concepts of Mathematics&lt;/a>.) Specialized variants of arrays are specified to provide portable programs with efficient representations for common use cases.&lt;/p>&lt;/blockquote></description><dc:creator>Bradley J. Lucier</dc:creator><pubDate>Tue, 30 Jun 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 190: Coroutine Generators</title><link>https://srfi.schemers.org/srfi-190/</link><guid>https://srfi.schemers.org/srfi-190</guid><description>SRFI 190 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines syntax to create
  &lt;a href="https://srfi.schemers.org/srfi-121/">SRFI
    121&lt;/a>/&lt;a href="https://srfi.schemers.org/srfi-158/">158&lt;/a>
  coroutine generators conveniently and in the flavor of Python
  generator functions.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 11 Jun 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 188: Splicing binding constructs for syntactic keywords</title><link>https://srfi.schemers.org/srfi-188/</link><guid>https://srfi.schemers.org/srfi-188</guid><description>SRFI 188 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Splicing binding constructs for syntactic keywords are versions
  of &lt;code>let-syntax&lt;/code> and &lt;code>letrec-syntax&lt;/code> that can
  be used in a definition context in the same way
  as &lt;code>begin&lt;/code>.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Wed, 03 Jun 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 185: Linear adjustable-length strings</title><link>https://srfi.schemers.org/srfi-185/</link><guid>https://srfi.schemers.org/srfi-185</guid><description>SRFI 185 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
Scheme specifies mutable fixed-length strings.
&lt;a href="https://srfi.schemers.org/srfi-118/srfi-118.html">SRFI 118&lt;/a>
adds two procedures, &lt;code>string-append!&lt;/code> and
&lt;code>string-replace!&lt;/code>, which allow the length of the string to change.
This SRFI provides two linear-update versions of these procedures:
that is, the implementation may change the string length or return a
new string instead.
In addition, two convenience macros are provided that make the
procedures somewhat easier to use.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sun, 26 Apr 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 182: ADBMAL, ALET, and ALET*</title><link>https://srfi.schemers.org/srfi-182/</link><guid>https://srfi.schemers.org/srfi-182</guid><description>SRFI 182 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>Unlike the VALUES and CALL-WITH-VALUES mechanism of R5RS, this one
uses an explicit representation for multiple return values as a single
value, namely a procedure.  Decomposition of multiple values is done
by simple application.  The macro, ADBMAL, evaluates to a procedure
that takes one procedure argument.  The ADBMAL macro can be compared
with LAMBDA.  While a LAMBDA expression that consists of
&amp;lt;formals> and &amp;lt;body> requires some actual arguments later
when the evaluated LAMBDA expression is called, an ADBMAL expression
that consists of &amp;lt;expression>s corresponding to actual arguments
of LAMBDA requires &amp;lt;formals> and &amp;lt;body>, that is, an
evaluated LAMBDA expression, later when the evaluated ADBMAL
expression is called.&lt;/p>

&lt;p>This SRFI also introduces the new LET-syntax ALET and ALET*, which
depend on ADBMAL to manipulate multiple values, and which are
compatible with LET and LET* of R5RS in single-value bindings.  They
also have a binding form making use of VALUES and CALL-WITH-VALUES to
handle multiple values, and new binding forms for list, cons, and
other multiple values.  In addition, they have several new binding
forms for useful functions such as escape, iteration, optional
arguments, etc.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Fri, 27 Mar 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 183: Another format procedure, Fox</title><link>https://srfi.schemers.org/srfi-183/</link><guid>https://srfi.schemers.org/srfi-183</guid><description>SRFI 183 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI introduces the formatting procedure Fox ("format of X"),
  which takes one required argument and a variable number of additional
  arguments and returns a formatted string.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Fri, 27 Mar 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 184: define-record-lambda</title><link>https://srfi.schemers.org/srfi-184/</link><guid>https://srfi.schemers.org/srfi-184</guid><description>SRFI 184 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI introduces a macro, DEFINE-RECORD-LAMBDA, that defines a
  set of procedures, that is, a group of constructors and a predicate.
  The constructors also make a group of procedures, namely record
  lambdas, that have no explicit field accessors and mutators.  They
  can have various kinds of fields, such as common fields, required
  fields, optional fields, automatic fields, read-only fields,
  read-write fields, invisible fields, immutable fields, and virtual
  fields.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Fri, 27 Mar 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 187: ALAMBDA and ADEFINE</title><link>https://srfi.schemers.org/srfi-187/</link><guid>https://srfi.schemers.org/srfi-187</guid><description>SRFI 187 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>&lt;p>This SRFI introduces alambda, which creates a procedure that checks
its actual arguments, takes various types of required and optional
variables.&lt;br> This SRFI is based on
&lt;a href="https://srfi.schemers.org/srfi-92/">SRFI 92&lt;/a>
as an extension of the optional arguments of
&lt;a href="https://srfi.schemers.org/srfi-182/">SRFI 182&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Fri, 27 Mar 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 176: Version flag</title><link>https://srfi.schemers.org/srfi-176/</link><guid>https://srfi.schemers.org/srfi-176</guid><description>SRFI 176 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines a standard command-line flag to get version
  information from a Scheme implementation.  The output is
  Line-oriented S-expressions which are easy to parse from Scheme, C,
  and shell scripts and can co-exist with non-S-expression output.  A
  standard vocabulary is defined; extensions are easy to make.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Mon, 24 Feb 2020 12:00:00 -0800</pubDate></item><item><title>SRFI 174: POSIX Timespecs</title><link>https://srfi.schemers.org/srfi-174/</link><guid>https://srfi.schemers.org/srfi-174</guid><description>SRFI 174 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines the trivial type &lt;i>timespec&lt;/i>, which is used
to represent the &lt;code>struct timespec&lt;/code> defined by the
&lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/time.h.html">
P&lt;small>OSIX&lt;/small> &lt;code>&amp;lt;time.h>&lt;/code> header&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sat, 21 Dec 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 175: ASCII character library</title><link>https://srfi.schemers.org/srfi-175/</link><guid>https://srfi.schemers.org/srfi-175</guid><description>SRFI 175 is now in &lt;em>final&lt;/em> status.&lt;blockquote>  &lt;p>This SRFI defines ASCII-only equivalents to many of the
  character procedures in standard Scheme plus a few extra ones.
  Recent Scheme standards are based around Unicode but the
  significant syntactic elements in many file formats and network
  protocols are all ASCII. Such low-level code can run faster and
  its behavior can be easier to understand when it uses ASCII
  primitives.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Fri, 20 Dec 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 172: Two Safer Subsets of R7RS</title><link>https://srfi.schemers.org/srfi-172/</link><guid>https://srfi.schemers.org/srfi-172</guid><description>SRFI 172 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI provides two libraries for use with R7RS that provide a
way to sandbox the &lt;code>eval&lt;/code> procedure to make it safer to use
in evaluating Scheme expressions of doubtful provenance.  The intention
is to call &lt;code>eval&lt;/code>, passing it an S-expression representing a
Scheme procedure and the environment defined by one of these libraries.
Since code evaluated by &lt;code>eval&lt;/code> runs in a null lexical
environment, the resulting procedure can then be invoked with less
concern about possible side effects.
&lt;/p>

&lt;p>&lt;b>Use of these libraries does not provide any sort of safety
guarantee.  There are still many loopholes uncaught, including
attempts to process circular structure and over-allocation of memory.
The claim is only that the probability of such an attack is reduced,
not that it is eliminated.
However, using these libraries is a simple provision that is easy to
implement and easy to use.  For higher safety, it can readily be
combined with other provisions.
&lt;/b>&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sun, 10 Nov 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 167: Ordered Key Value Store</title><link>https://srfi.schemers.org/srfi-167/</link><guid>https://srfi.schemers.org/srfi-167</guid><description>SRFI 167 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This library describes an interface for an ordered key-value store
  that is suitable for implementing a storage engine for the generic
  tuple-store SRFI.  It maps cleanly to existing ordered key-value
  databases that may or may not provide transactions.&lt;/p>&lt;/blockquote></description><dc:creator>Amirouche Boubekki</dc:creator><pubDate>Fri, 08 Nov 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 168: Generic Tuple Store Database</title><link>https://srfi.schemers.org/srfi-168/</link><guid>https://srfi.schemers.org/srfi-168</guid><description>SRFI 168 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This library is a generic approach to the database abstractions
  known as triplestore and quadstore.  Generic Tuple Store Database
  implements n-tuple ordered sets and associated primitives for
  working with them in the context of data management.&lt;/p>&lt;/blockquote></description><dc:creator>Amirouche Boubekki</dc:creator><pubDate>Fri, 08 Nov 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 171: Transducers</title><link>https://srfi.schemers.org/srfi-171/</link><guid>https://srfi.schemers.org/srfi-171</guid><description>SRFI 171 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>A library implementing transducers &amp;amp;mdash; composable algorithmic
  transformations.  Scheme has many different ways of expressing
  transformations over different collection types, but they are all
  unique to whatever base type they work on.  This SRFI proposes a new
  construct, the transducer, that is oblivious to the context in which
  it is being used.&lt;/p>&lt;/blockquote></description><dc:creator>Linus Björnstam</dc:creator><pubDate>Sat, 26 Oct 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 173: Hooks</title><link>https://srfi.schemers.org/srfi-173/</link><guid>https://srfi.schemers.org/srfi-173</guid><description>SRFI 173 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This library describes a mechanism known as hooks.  Hooks are a
  certain kind of extension point in a program that allows
  interleaving the execution of arbitrary code with the execution of
  the program without introducing any coupling between the two.&lt;/p>&lt;/blockquote></description><dc:creator>Amirouche Boubekki</dc:creator><pubDate>Thu, 24 Oct 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 165: The Environment Monad</title><link>https://srfi.schemers.org/srfi-165/</link><guid>https://srfi.schemers.org/srfi-165</guid><description>SRFI 165 is now in &lt;em>final&lt;/em> status.&lt;blockquote>Monads model computations.  The environment monad models
computations that depend on values from a shared environment.
These computations can read values from the environment, pass
values to subsequent computations, execute sub-computations in an
extended environment, and modify the environment for future
computations.&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 05 Sep 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 160: Homogeneous numeric vector libraries</title><link>https://srfi.schemers.org/srfi-160/</link><guid>https://srfi.schemers.org/srfi-160</guid><description>SRFI 160 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI describes a set of operations on SRFI 4 homogeneous vector
types (plus a few additional types) that are closely analogous
to the vector operations library,
&lt;a href="http://srfi.schemers.org/srfi-133/srfi-133.html">
SRFI 133&lt;/a>.
An external representation is specified which may be supported by the
&lt;code>read&lt;/code> and &lt;code>write&lt;/code> procedures and by the program
parser so that programs can contain references to literal homogeneous
vectors.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Shiro Kawai (contributed a major patch)</dc:creator><pubDate>Tue, 27 Aug 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 162: Comparators sublibrary</title><link>https://srfi.schemers.org/srfi-162/</link><guid>https://srfi.schemers.org/srfi-162</guid><description>SRFI 162 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
This SRFI provides a few extra procedures and comparators to go
with SRFI 128, Comparators.  Implementers are urged to add them to
their SRFI 128 libraries, for which reason they are not packaged
as a separate library.
&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 27 Aug 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 164: Enhanced multi-dimensional Arrays</title><link>https://srfi.schemers.org/srfi-164/</link><guid>https://srfi.schemers.org/srfi-164</guid><description>SRFI 164 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI describes the array data type (a generalization of
  vectors to multiple indexes or dimensions), along with a set of
  procedures for working on them.&lt;/p>
&lt;p>This specification is an extension of &lt;a href="http://srfi.schemers.org/srfi-25/srfi-25.html">SRFI 25&lt;/a>,
  with additions from Racket’s
  &lt;a href="https://docs.racket-lang.org/math/array.html">math.array&lt;/a> package
  and other sources.  It has been implemented in the &lt;a href="https://www.gnu.org/software/kawa/Arrays.html">Kawa dialect of Scheme&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Thu, 08 Aug 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 169: Underscores in numbers</title><link>https://srfi.schemers.org/srfi-169/</link><guid>https://srfi.schemers.org/srfi-169</guid><description>SRFI 169 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Many people find that large numbers are easier to read when the
  digits are broken into small groups.  For example, the number
  &lt;code>1582439&lt;/code> might be easier to read if written as &lt;code>1
  582 439&lt;/code>.  This applies to source code as it does to other
  writing.  We propose an extension of Scheme syntax to allow the
  underscore as a digit separator in numerical constants.&lt;/p>&lt;/blockquote></description><dc:creator>Lassi Kortela</dc:creator><pubDate>Fri, 26 Jul 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 121: Generators</title><link>https://srfi.schemers.org/srfi-121/</link><guid>https://srfi.schemers.org/srfi-121</guid><description>SRFI 121 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines utility procedures that
      create, transform, and consume generators. A generator is simply a
      procedure with no arguments that works as a source of a series of values.
      Every time it is called, it yields a value. Generators may be finite or
      infinite; a finite generator returns an end-of-file object to indicate
      that it is exhausted. For example, &lt;code>read-char&lt;/code>,
      &lt;code>read-line&lt;/code>, and &lt;code>read&lt;/code> are generators that
      generate characters, lines, and objects from the current input port.
      Generators provide lightweight laziness.&lt;/p>&lt;/blockquote></description><dc:creator>Shiro Kawai, John Cowan, and Thomas Gilray</dc:creator><pubDate>Thu, 18 Jul 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 161: Unifiable Boxes</title><link>https://srfi.schemers.org/srfi-161/</link><guid>https://srfi.schemers.org/srfi-161</guid><description>SRFI 161 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>
  Unifiable boxes are, like the boxes
  of &lt;a href="https://srfi.schemers.org/srfi-111/srfi-111.html">SRFI
    111&lt;/a>, objects with a single mutable state.  A constructor,
  predicate, accessor, and mutator are provided.
&lt;/p>

&lt;p>
In addition to this, an equality predicate and union operations (link,
union, unify) are provided.  Applying a union operation to two
unifiable boxes makes the two boxes equal (in the sense of the
equality predicate).  As a consequence, their state will also become
identical.  In the case of link and union, it will be the state of one
of the two unioned boxes.  In the case of unify, the state is
determined by a supplied unification procedure.
&lt;/p>

&lt;p>
  Unifiable boxes are
  also known under the names &lt;i>disjoint-set data
    structure&lt;/i>, &lt;i>union–find data structure&lt;/i> or &lt;i>merge–find
    set&lt;/i>.
&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Fri, 08 Feb 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 163: Enhanced array literals</title><link>https://srfi.schemers.org/srfi-163/</link><guid>https://srfi.schemers.org/srfi-163</guid><description>SRFI 163 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This is a specification of a reader form (literals)
for multi-dimensional arrays.
It is an extension of the Common Lisp array reader syntax to handle
non-zero lower bounds, optional explicit bounds,
and optional uniform element types (compatible with &lt;a href="https://srfi.schemers.org/srfi-4">SRFI 4&lt;/a>).
It can be used in conjunction with &lt;a href="https://srfi.schemers.org/srfi-25">SRFI 25&lt;/a>, &lt;a href="https://srfi.schemers.org/srfi-122">SRFI 122&lt;/a>,
or  &lt;a href="https://srfi.schemers.org/srfi-164">SRFI 164&lt;/a>.
These extensions were implemented in Guile (except the handling of rank-0 arrays),
and later in Kawa.
&lt;/p>&lt;p>There are recommendations for output formatting
and a suggested &lt;code>format-array&lt;/code> procedure.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Fri, 18 Jan 2019 12:00:00 -0800</pubDate></item><item><title>SRFI 146: Mappings</title><link>https://srfi.schemers.org/srfi-146/</link><guid>https://srfi.schemers.org/srfi-146</guid><description>SRFI 146 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;em>Mappings&lt;/em> are finite sets of
      associations, where each association is a pair consisting of a key and an
      arbitrary Scheme value. The keys are elements of a suitable domain. Each
      mapping holds no more than one association with the same key. The
      fundamental mapping operation is retrieving the value of an association
      stored in the mapping when the key is given.&lt;/p>&lt;/blockquote></description><dc:creator>Arthur A. Gleckler and Marc Nieper-Wißkirchen</dc:creator><pubDate>Thu, 24 May 2018 12:00:00 -0800</pubDate></item><item><title>SRFI 150: Hygienic ERR5RS Record Syntax (reduced)</title><link>https://srfi.schemers.org/srfi-150/</link><guid>https://srfi.schemers.org/srfi-150</guid><description>SRFI 150 is now in &lt;em>final&lt;/em> status.&lt;blockquote>	&lt;p>
	  This SRFI provides a specification and portable implementation of an
	  extension of the ERR5RS record syntax
	  of &lt;a href="https://srfi.schemers.org/srfi-131/srfi-131.html">SRFI
	  131&lt;/a>, where field names inserted by macro transformers are
	  effectively renamed as if the macro transformer inserted a binding.
	  This makes this SRFI compatible with the semantics of the record-type
	  definitions of
	  the &lt;a href="https://bitbucket.org/cowan/r7rs/src/draft-10/rnrs/r7rs.pdf">R7RS&lt;/a>
	  as intended by
	  its &lt;a href="https://groups.google.com/d/msg/scheme-reports-wg2/oKuhgwaM45w/KXgPrh8oAwAJ">authors&lt;/a>.
	  In addition, field names may also be other types of Scheme datums,
	  like numbers and strings, or
	  &lt;a href="https://srfi.schemers.org/srfi-88/srfi-88.html">SRFI 88&lt;/a> keyword objects.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 16 Jan 2018 12:00:00 -0800</pubDate></item><item><title>SRFI 156: Syntactic combiners for binary predicates</title><link>https://srfi.schemers.org/srfi-156/</link><guid>https://srfi.schemers.org/srfi-156</guid><description>SRFI 156 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>Recognizing binary predicates as a specific area
  in which the use of prefix operators is an impediment,
  we propose a thin layer of "syntactic stevia" for in-fixing
  such predicates. It can be implemented using regular Scheme
  macros. We suggest that the code &lt;code>(is x &amp;lt; y)&lt;/code> should
  be transformed to &lt;code>(&amp;lt; x y)&lt;/code>, and &lt;code>(is x &amp;lt; y &amp;lt;= z)&lt;/code>
  -- to &lt;code>(let ((y* y)) (and (&amp;lt; x y*) (&amp;lt;= y* z)))&lt;/code>.
  In addition, we suggest special meaning to the &lt;code>_&lt;/code> symbol:
  &lt;code>(is _ &amp;lt; y)&lt;/code> and &lt;code>(is x &amp;lt; _)&lt;/code>
  should be transformed to &lt;code>(lambda (_) (&amp;lt; _ y))&lt;/code>
  and &lt;code>(lambda (_) (&amp;lt; x _))&lt;/code>, respectively.
  This SRFI document also describes some other uses of the
  &lt;code>is&lt;/code> macro and its limitations.&lt;/p>&lt;/blockquote></description><dc:creator>Panicz Maciej Godek</dc:creator><pubDate>Mon, 18 Dec 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 158: Generators and Accumulators</title><link>https://srfi.schemers.org/srfi-158/</link><guid>https://srfi.schemers.org/srfi-158</guid><description>SRFI 158 is now in &lt;em>final&lt;/em> status.&lt;blockquote>&lt;p>This SRFI defines utility procedures that create, transform, and consume generators.
  A generator is simply a procedure with no arguments that works
  as a source of values.  Every time it is called,
  it yields a value.  Generators may be finite or infinite; a finite
  generator returns an end-of-file object to indicate that it is exhausted.
  For example, &lt;code>read-char&lt;/code>, &lt;code>read-line&lt;/code>,
  and &lt;code>read&lt;/code> are generators that
  generate characters, lines, and objects from the current input port.
  Generators provide lightweight laziness.
&lt;/p>

&lt;p>This SRFI also defines procedures that return accumulators.
  An accumulator is the inverse of a generator:  it is a procedure of one argument
  that works as a sink of values.
&lt;/p>&lt;/blockquote></description><dc:creator>Shiro Kawai, John Cowan, and Thomas Gilray</dc:creator><pubDate>Fri, 27 Oct 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 152: String Library (reduced)</title><link>https://srfi.schemers.org/srfi-152/</link><guid>https://srfi.schemers.org/srfi-152</guid><description>SRFI 152 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Scheme has an impoverished set of
      string-processing utilities, which is a problem for authors of portable
      code. This SRFI proposes a coherent and comprehensive set of
      string-processing procedures. It is a reduced version of SRFI 13 that has
      been aligned with SRFI 135, Immutable Texts. Unlike SRFI 13, it has been
      made consistent with the R5RS, R6RS, and R7RS-small string
      procedures.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Wed, 04 Oct 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 40: A Library of Streams</title><link>https://srfi.schemers.org/srfi-40/</link><guid>https://srfi.schemers.org/srfi-40</guid><description>SRFI 40 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Along with higher-order functions, one of the
      hallmarks of functional programming is lazy evaluation. A primary
      manifestation of lazy evaluation is lazy lists, generally called streams
      by Scheme programmers, where evaluation of a list element is delayed
      until its value is needed.
      &lt;/p>&lt;p>The literature on lazy evaluation distinguishes
      two styles of laziness, called even and odd. Odd style streams are
      ubiquitous among Scheme programs and can be easily encoded with the
      Scheme primitives delay and force defined in R5RS. However, the even
      style delays evaluation in a manner closer to that of traditional lazy
      languages such as Haskell and avoids an "off by one" error that is
      symptomatic of the odd style.
      &lt;/p>&lt;p>This SRFI defines the stream data type in the
      even style, some essential procedures and syntax that operate on streams,
      and motivates our choice of the even style. A companion SRFI 41 Stream
      Library provides additional procedures and syntax which make for more
      convenient processing of streams and shows several examples of their
      use.&lt;/p>&lt;/blockquote></description><dc:creator>Philip L. Bewig</dc:creator><pubDate>Thu, 10 Aug 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 114: Comparators</title><link>https://srfi.schemers.org/srfi-114/</link><guid>https://srfi.schemers.org/srfi-114</guid><description>SRFI 114 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This proposal is a rewrite of &lt;a href="https://srfi.schemers.org/srfi-67/">SRFI 67&lt;/a>, Compare Procedures, extending it from procedures
      that represent a total order to procedure bundles that represent one or
      more of a total order, an equality predicate, and a hash function. By
      packaging these procedures together, along with a type test predicate,
      they can be treated as a single item for use in the implementation of
      data structures.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Thu, 10 Aug 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 142: Bitwise Operations</title><link>https://srfi.schemers.org/srfi-142/</link><guid>https://srfi.schemers.org/srfi-142</guid><description>SRFI 142 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a coherent and comprehensive
      set of procedures for performing bitwise logical operations on integers;
      it is accompanied by a reference implementation of the spec in terms of a
      set of seven core operators. The sample implementation is portable, as
      efficient as practical with pure Scheme arithmetic (it is worthwhile
      replacing the core operators with C or assembly language if possible),
      and open source.
      &lt;/p>&lt;p>The precise semantics of these operators is
      almost never an issue. A consistent, portable set of &lt;em>names&lt;/em> and
      &lt;em>parameter conventions&lt;/em>, however, is. Hence this SRFI, which is
      based mainly on &lt;a href="https://srfi.schemers.org/srfi-33/">SRFI 33&lt;/a>, with some changes and
      additions from &lt;a href="http://srfi.schemers.org/srfi-33/mail-archive/msg00023.html">Olin's late
      revisions to SRFI 33&lt;/a> (which were never consummated). &lt;a href="https://srfi.schemers.org/srfi-60/">SRFI 60&lt;/a> (based on SLIB) is smaller but has a few
      procedures of its own; some of its procedures have both native (often
      Common Lisp) and SRFI 33 names. They have been incorporated into this
      SRFI. &lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-12.html#node_sec_11.4">
      R6RS&lt;/a> is a subset of SRFI 60, except that all procedure names begin
      with a &lt;code>bitwise-&lt;/code> prefix. A few procedures have been added from
      the general vector &lt;a href="https://srfi.schemers.org/srfi-133/">SRFI 133&lt;/a>.
      &lt;/p>&lt;p>Among the applications of bitwise operations
      are: hashing, Galois-field calculations of error-detecting and
      error-correcting codes, cryptography and ciphers, pseudo-random number
      generation, register-transfer-level modeling of digital logic designs,
      Fast-Fourier transforms, packing and unpacking numbers in persistent data
      structures, space-filling curves with applications to dimension reduction
      and sparse multi-dimensional database indexes, and generating approximate
      seed values for root-finders and transcendental function
      algorithms.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Thu, 10 Aug 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 148: Eager syntax-rules</title><link>https://srfi.schemers.org/srfi-148/</link><guid>https://srfi.schemers.org/srfi-148</guid><description>SRFI 148 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Writing powerful &lt;code>syntax-rules&lt;/code>
      macros is hard because they do not compose well: The arguments of a macro
      expansion are not expanded. This SRFI defines an easy to comprehend
      high-level system for writing powerful, composable (or &lt;em>eager&lt;/em>)
      macros, two of whose defining features are that its macro arguments are
      (in general) eagerly expanded and that it can be portably implemented in
      any Scheme implementation conforming to the R7RS.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 08 Aug 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 144: Flonums</title><link>https://srfi.schemers.org/srfi-144/</link><guid>https://srfi.schemers.org/srfi-144</guid><description>SRFI 144 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes numeric procedures
      applicable to &lt;em>flonums&lt;/em>, a subset of the inexact real numbers
      provided by a Scheme implementation. In most Schemes, the flonums and the
      inexact reals are the same. These procedures are semantically equivalent
      to the corresponding generic procedures, but allow more efficient
      implementations.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Will Clinger</dc:creator><pubDate>Mon, 17 Jul 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 151: Bitwise Operations</title><link>https://srfi.schemers.org/srfi-151/</link><guid>https://srfi.schemers.org/srfi-151</guid><description>SRFI 151 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a coherent and comprehensive
      set of procedures for performing bitwise logical operations on integers;
      it is accompanied by a reference implementation of the spec in terms of a
      set of seven core operators. The sample implementation is portable, as
      efficient as practical with pure Scheme arithmetic (it is much more
      efficient to replace the core operators with C or assembly language if
      possible), and open source.
      &lt;/p>&lt;p>The precise semantics of these operators is
      almost never an issue. A consistent, portable set of &lt;em>names&lt;/em> and
      &lt;em>parameter conventions&lt;/em>, however, is. Hence this SRFI, which is
      based mainly on &lt;a href="https://srfi.schemers.org/srfi-33/">SRFI 33&lt;/a>, with some changes and
      additions from &lt;a href="http://srfi.schemers.org/srfi-33/mail-archive/msg00023.html">Olin's late
      revisions to SRFI 33&lt;/a> (which were never consummated). &lt;a href="https://srfi.schemers.org/srfi-60/">SRFI 60&lt;/a> (based on SLIB) is smaller but has a few
      procedures of its own; some of its procedures have both native (often
      Common Lisp) and SRFI 33 names. They have been incorporated into this
      SRFI. &lt;a href="http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-12.html#node_sec_11.4">
      R6RS&lt;/a> is a subset of SRFI 60, except that all procedure names begin
      with a &lt;code>bitwise-&lt;/code> prefix. A few procedures have been added from
      the general vector &lt;a href="https://srfi.schemers.org/srfi-133/">SRFI 133&lt;/a>.
      &lt;/p>&lt;p>Among the applications of bitwise operations
      are: hashing, Galois-field calculations of error-detecting and
      error-correcting codes, cryptography and ciphers, pseudo-random number
      generation, register-transfer-level modeling of digital logic designs,
      Fast-Fourier transforms, packing and unpacking numbers in persistent data
      structures, space-filling curves with applications to dimension reduction
      and sparse multi-dimensional database indexes, and generating approximate
      seed values for root-finders and transcendental function
      algorithms.
      &lt;/p>&lt;p>This SRFI differs from SRFI 142 in only two
      ways:
      &lt;ol>
        &lt;li>
          &lt;p>The &lt;code>bitwise-if&lt;/code> function has the
          argument ordering of SLIB, SRFI 60, and R6RS rather than the ordering
          of SRFI 33.
        &lt;li>
          &lt;p>The order in which bits are processed by
          the procedures listed in the "Bits conversion" section has been
          clarified and some of the procedures' names have been changed. See
          "Bit processing order" for details.
      &lt;ol>&lt;/ol>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/ol>&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Mon, 10 Jul 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 149: Basic Syntax-rules Template Extensions</title><link>https://srfi.schemers.org/srfi-149/</link><guid>https://srfi.schemers.org/srfi-149</guid><description>SRFI 149 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The rules for valid
      &lt;code>&amp;lt;template>&lt;/code>s of &lt;code>&amp;lt;syntax rules>&lt;/code> are
      slightly softened to allow for more than one consecutive
      &lt;code>&amp;lt;ellipsis>&lt;/code> in subtemplates, and to allow pattern
      variables in subtemplates to be followed by more instances of the
      identifier &lt;code>&amp;lt;ellipsis>&lt;/code> than they are followed in the
      subpattern in which they occur.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sat, 08 Jul 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 143: Fixnums</title><link>https://srfi.schemers.org/srfi-143/</link><guid>https://srfi.schemers.org/srfi-143</guid><description>SRFI 143 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes arithmetic procedures
      applicable to a limited range of exact integers only. These procedures
      are semantically similar to the corresponding generic-arithmetic
      procedures, but allow more efficient implementations.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sat, 27 May 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 140: Immutable Strings</title><link>https://srfi.schemers.org/srfi-140/</link><guid>https://srfi.schemers.org/srfi-140</guid><description>SRFI 140 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This attempts to solve the same issues with
      R7RS strings raised by &lt;a href="https://srfi.schemers.org/srfi-135/">SRFI-135&lt;/a>, but with better
      integration with the Scheme language.
      &lt;/p>&lt;p>We propose to retain the name &lt;dfn>string&lt;/dfn>
      as the type of sequences of Unicode characters (scalar values). There are
      two standard subtypes of string:
      &lt;ul>
        &lt;li>Immutable strings, also called
        &lt;dfn>istrings&lt;/dfn>, cannot be modified after they have been created.
        Calling &lt;code>string-set!&lt;/code> on an istring throws an error. On the
        other hand, the core operations &lt;code>string-ref&lt;/code> and
        &lt;code>string-length&lt;/code> are guaranteed to be O(1).
        &lt;/li>&lt;li>Mutable strings can be modified
        &lt;q>in-place&lt;/q> using &lt;code>string-set!&lt;/code> and other operations.
        However, &lt;code>string-ref&lt;/code>, &lt;code>string-set!&lt;/code>, or
        &lt;code>string-length&lt;/code> have no performance guarantees. On many
        implementation they may take time proportional to the length of the
        string.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>An implementation may support other kinds of
      strings. For example on the Java platform it may be reasonable to
      consider any instance of &lt;code>java.lang.CharSequence&lt;/code> to be a
      string.
      &lt;/p>&lt;p>The main part of the proposal specifies the
      default bindings of various procedure names, as might be pre-defined in a
      REPL. Specifically, some procedures that traditionally return mutable
      strings are changed to return istrings. We later discuss compatibility
      and other library issues.
      &lt;/p>&lt;p>This combines &lt;a href="https://srfi.schemers.org/srfi-13/">SRFI-13&lt;/a>,
      &lt;a href="https://srfi.schemers.org/srfi-135/">SRFI-135&lt;/a>, and &lt;a href="/srfi-118/">SRFI-118&lt;/a>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Wed, 24 May 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 145: Assumptions</title><link>https://srfi.schemers.org/srfi-145/</link><guid>https://srfi.schemers.org/srfi-145</guid><description>SRFI 145 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A means to denote the invalidity of certain
      code paths in a Scheme program is proposed. It allows Scheme code to turn
      the evaluation into a user-defined error that need not be signalled by
      the implementation. Optimizing compilers may use these denotations to
      produce better code and to issue better warnings about dead code.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Fri, 31 Mar 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 147: Custom macro transformers</title><link>https://srfi.schemers.org/srfi-147/</link><guid>https://srfi.schemers.org/srfi-147</guid><description>SRFI 147 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Each syntax definition assigns a macro
      transformer to a keyword. The macro transformer is specified by a
      transformer spec, which is either an instance of
      &lt;code>syntax-rules&lt;/code>, an existing syntactic keyword (including macro
      keywords and the syntactic keywords that introduce the core forms, like
      &lt;code>lambda&lt;/code>, &lt;code>if&lt;/code>, or &lt;code>define&lt;/code>), or a use
      of a macro that eventually expands into an instance of
      &lt;code>syntax-rules&lt;/code>. In the latter case, the keyword of macro use
      is called a &lt;em>custom macro transformer&lt;/em>.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 07 Mar 2017 12:00:00 -0800</pubDate></item><item><title>SRFI 136: Extensible record types</title><link>https://srfi.schemers.org/srfi-136/</link><guid>https://srfi.schemers.org/srfi-136</guid><description>SRFI 136 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>SRFI 9 and the compatible R7RS-small provide
      Scheme with record types. The basic problem that is solved by these
      record types is that they allow the user to introduce new types, disjoint
      from all existing types. The record type system described in this
      document is a conservative extension to SRFI 9 and R7RS record types (in
      other words, the keyword &lt;code>define-record-type&lt;/code> defined in this
      specification can serve as the equally named keyword from SRFI 9 and R7RS
      and can thus be safely exported from &lt;code>(srfi 9)&lt;/code> and
      &lt;code>(scheme base)&lt;/code>) that is intended to solve another fundamental
      problem, namely the introduction of subtypes.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 25 Dec 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 141: Integer division</title><link>https://srfi.schemers.org/srfi-141/</link><guid>https://srfi.schemers.org/srfi-141</guid><description>SRFI 141 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI provides a fairly complete set of
      integral division and remainder operators.&lt;/p>&lt;/blockquote></description><dc:creator>Taylor Campbell and John Cowan</dc:creator><pubDate>Wed, 14 Dec 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 137: Minimal Unique Types</title><link>https://srfi.schemers.org/srfi-137/</link><guid>https://srfi.schemers.org/srfi-137</guid><description>SRFI 137 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI is intended to standardize a
      primitive run-time mechanism to create disjoint types.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Marc Nieper-Wißkirchen</dc:creator><pubDate>Tue, 04 Oct 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 139: Syntax parameters</title><link>https://srfi.schemers.org/srfi-139/</link><guid>https://srfi.schemers.org/srfi-139</guid><description>SRFI 139 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Syntax parameters are to the expansion process
      of a Scheme program what parameters are to the evaluation process of a
      Scheme program. They allow hygienic implementation of syntactic forms
      that would otherwise introduce implicit identifiers
      unhygienically.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Sun, 02 Oct 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 138: Compiling Scheme programs to executables</title><link>https://srfi.schemers.org/srfi-138/</link><guid>https://srfi.schemers.org/srfi-138</guid><description>SRFI 138 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes, for sufficiently
      POSIX-compatible systems, a portable interface for compiling Scheme
      programs conforming to the R7RS to binaries that can be directly executed
      on the host system.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Nieper-Wißkirchen</dc:creator><pubDate>Wed, 28 Sep 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 135: Immutable Texts</title><link>https://srfi.schemers.org/srfi-135/</link><guid>https://srfi.schemers.org/srfi-135</guid><description>SRFI 135 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>In Scheme, strings are a mutable data type.
      Although it "is an error" (&lt;abbr title="Revised&amp;lt;sup>5&amp;lt;/sup> Report on Scheme">R5RS&lt;/abbr> and
      &lt;abbr title="Revised&amp;lt;sup>7&amp;lt;/sup> Report on Scheme">R7RS&lt;/abbr>) to use
      &lt;code>string-set!&lt;/code> on literal strings or on strings returned by
      &lt;code>symbol->string&lt;/code>, and any attempt to do so "should raise an
      exception" (&lt;abbr title="Revised&amp;lt;sup>6&amp;lt;/sup> Report on Scheme">R6RS&lt;/abbr>), all
      other strings are mutable.
      &lt;/p>&lt;p>Although many mutable strings are never
      actually mutated, the mere possibility of mutation complicates
      specifications of libraries that use strings, encourages precautionary
      copying of strings, and precludes structure sharing that could otherwise
      be used to make procedures such as &lt;code>substring&lt;/code> and
      &lt;code>string-append&lt;/code> faster and more space-efficient.
      &lt;/p>&lt;p>This &lt;abbr title="Scheme Request for Implementation">SRFI&lt;/abbr> specifies a new data type
      of immutable texts. It comes with efficient and portable sample
      implementations that guarantee O(1) indexing for both sequential and
      random access, even in systems whose &lt;code>string-ref&lt;/code> procedure
      takes linear time.
      &lt;/p>&lt;p>The operations of this new data type include
      analogues for all of the non-mutating operations on strings specified by
      the R7RS and most of those specified by &lt;abbr title="String cursors">&lt;a href="https://srfi.schemers.org/srfi-130/">SRFI 130&lt;/a>&lt;/abbr>, but the
      immutability of texts and uniformity of character-based indexing simplify
      the specification of those operations while avoiding several
      inefficiencies associated with the mutability of Scheme's strings.&lt;/p>&lt;/blockquote></description><dc:creator>William D Clinger</dc:creator><pubDate>Tue, 06 Sep 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 134: Immutable Deques</title><link>https://srfi.schemers.org/srfi-134/</link><guid>https://srfi.schemers.org/srfi-134</guid><description>SRFI 134 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines immutable deques. A deque is
      a double-ended queue, a sequence which allows elements to be added or
      removed efficiently from either end. A structure is immutable when all
      its operations leave the structure unchanged. Note that none of the
      procedures specified here ends with an exclamation point.&lt;/p>&lt;/blockquote></description><dc:creator>Kevin Wortman, John Cowan, and Wolfgang Corcoran-Mathe</dc:creator><pubDate>Fri, 01 Jul 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 125: Intermediate hash tables</title><link>https://srfi.schemers.org/srfi-125/</link><guid>https://srfi.schemers.org/srfi-125</guid><description>SRFI 125 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines an interface to hash tables,
      which are widely recognized as a fundamental data structure for a wide
      variety of applications. A hash table is a data structure that:
      &lt;ul>
        &lt;li>Is disjoint from all other types.
        &lt;/li>&lt;li>
          Provides a mapping from objects known as
          &lt;em>keys&lt;/em> to corresponding objects known as
          &lt;em>values&lt;/em>.
          &lt;ul>
            &lt;li>Keys may be any Scheme objects in some
            kinds of hash tables, but are restricted in other kinds.
            &lt;/li>&lt;li>Values may be any Scheme objects.
          &lt;/li>&lt;/ul>&lt;li>
        &lt;/li>&lt;li>Has no intrinsic order for the key-value
        &lt;em>associations&lt;/em> it contains.
        &lt;/li>&lt;li>Provides an &lt;em>equality predicate&lt;/em>
        which defines when a proposed key is the same as an existing key. No
        table may contain more than one value for a given key.
        &lt;/li>&lt;li>Provides a &lt;em>hash function&lt;/em> which maps
        a candidate key into a non-negative exact integer.
        &lt;/li>&lt;li>Supports mutation as the primary means of
        setting the contents of a table.
        &lt;/li>&lt;li>Provides key lookup and destructive update
        in (expected) amortized constant time, provided a satisfactory hash
        function is available.
        &lt;/li>&lt;li>Does not guarantee that whole-table
        operations work in the presence of concurrent mutation of the whole
        hash table (values may be safely mutated).
      &lt;/li>&lt;/li>&lt;li>&lt;/li>&lt;/ul>&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Will Clinger</dc:creator><pubDate>Sat, 28 May 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 130: Cursor-based string library</title><link>https://srfi.schemers.org/srfi-130/</link><guid>https://srfi.schemers.org/srfi-130</guid><description>SRFI 130 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;abbr title="Revised&amp;lt;sup>5&amp;lt;/sup> Report on Scheme">R5RS&lt;/abbr> Scheme has
      an impoverished set of string-processing utilities, which is a problem
      for authors of portable code. Although &lt;abbr title="Revised&amp;lt;sup>7&amp;lt;/sup> Report on Scheme">R7RS&lt;/abbr> provides
      some extensions and improvements, it is still very incomplete. This
      &lt;abbr title="Scheme Request for Implementation">SRFI&lt;/abbr> proposes a
      coherent and comprehensive set of string-processing procedures; it is
      accompanied by a portable sample implementation of the spec.
      &lt;/p>&lt;p>This SRFI is derived from SRFI 13. The biggest
      difference is that it allows subsequences of strings to be specified by
      &lt;em>cursors&lt;/em> as well as the traditional string indexes. In addition,
      it omits the comparison, case-mapping, and mutation operations of SRFI
      13, as well as all procedures already present in &lt;abbr title="Revised&amp;lt;sup>7&amp;lt;/sup> Report on Scheme">R7RS&lt;/abbr>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sat, 28 May 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 132: Sort Libraries</title><link>https://srfi.schemers.org/srfi-132/</link><guid>https://srfi.schemers.org/srfi-132</guid><description>SRFI 132 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes the API for a full-featured
      sort toolkit.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Wed, 20 Apr 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 133: Vector Library (R7RS-compatible)</title><link>https://srfi.schemers.org/srfi-133/</link><guid>https://srfi.schemers.org/srfi-133</guid><description>SRFI 133 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a comprehensive library of
      vector operations accompanied by a freely available and complete
      reference implementation. The reference implementation is unencumbered by
      copyright, and useable with no modifications on any Scheme system that is
      R5RS-compliant. It also provides several hooks for
      implementation-specific optimization as well.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sun, 20 Mar 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 129: Titlecase procedures</title><link>https://srfi.schemers.org/srfi-129/</link><guid>https://srfi.schemers.org/srfi-129</guid><description>SRFI 129 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines R7RS-style
      &lt;code>char-title-case?&lt;/code>, &lt;code>char-titlecase&lt;/code>, and
      &lt;code>string-titlecase&lt;/code> procedures.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 08 Mar 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 128: Comparators (reduced)</title><link>https://srfi.schemers.org/srfi-128/</link><guid>https://srfi.schemers.org/srfi-128</guid><description>SRFI 128 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI provides &lt;i>comparators&lt;/i>, which
      bundle a type test predicate, an equality predicate, an ordering
      predicate, and a hash function (the last two are optional) into a single
      Scheme object. By packaging these procedures together, they can be
      treated as a single item for use in the implementation of data
      structures.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Sun, 14 Feb 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 131: ERR5RS Record Syntax (reduced)</title><link>https://srfi.schemers.org/srfi-131/</link><guid>https://srfi.schemers.org/srfi-131</guid><description>SRFI 131 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI is a reduced version of the SRFI 99
      syntactic layer that can be implemented with &lt;code>syntax-rules&lt;/code>
      without requiring low-level macros. Like SRFI-99's syntax layer, it is
      backward compatible with the &lt;code>define-record-type&lt;/code> macro from
      &lt;a href="https://srfi.schemers.org/srfi-9/">SRFI 9&lt;/a> or R7RS-small. It is forward compatible with
      &lt;a href="https://srfi.schemers.org/srfi-99/">SRFI 99&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan and Will Clinger</dc:creator><pubDate>Sat, 13 Feb 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 126: R6RS-based hashtables</title><link>https://srfi.schemers.org/srfi-126/</link><guid>https://srfi.schemers.org/srfi-126</guid><description>SRFI 126 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>We provide a hashtable API that takes the R6RS
      hashtables API as a basis and makes backwards compatible additions such
      as support for weak hashtables, external representation, API support for
      double hashing implementations, and utility procedures.&lt;/p>&lt;/blockquote></description><dc:creator>Taylan Ulrich Bayırlı/Kammer</dc:creator><pubDate>Mon, 01 Feb 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 127: Lazy Sequences</title><link>https://srfi.schemers.org/srfi-127/</link><guid>https://srfi.schemers.org/srfi-127</guid><description>SRFI 127 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Lazy sequences (or lseqs, pronounced
      "ell-seeks") are a generalization of lists. In particular, an lseq is
      either a proper list or a dotted list whose last cdr is a &lt;a href="https://srfi.schemers.org/srfi-121/">SRFI 121&lt;/a> generator. A generator is a procedure that can
      be invoked with no arguments in order to lazily supply additional
      elements of the lseq. When a generator has no more elements to return, it
      returns an end-of-file object. Consequently, lazy sequences cannot
      reliably contain end-of-file objects.
      &lt;/p>&lt;p>This SRFI provides a set of procedures suitable
      for operating on lazy sequences based on &lt;a href="https://srfi.schemers.org/srfi-1/">SRFI
      1&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Mon, 18 Jan 2016 12:00:00 -0800</pubDate></item><item><title>SRFI 124: Ephemerons</title><link>https://srfi.schemers.org/srfi-124/</link><guid>https://srfi.schemers.org/srfi-124</guid><description>SRFI 124 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>An ephemeron is an object with two components
      called its &lt;em>key&lt;/em> and its &lt;em>datum&lt;/em>. It differs from an
      ordinary pair as follows: if the garbage collector (GC) can prove that
      there are no references to the key except from the ephemeron itself and
      possibly from the datum, then it is free to &lt;em>break&lt;/em> the ephemeron,
      dropping its reference to both key and datum. In other words, an
      ephemeron can be broken when nobody else cares about its key. Ephemerons
      can be used to construct weak vectors or lists and (possibly in
      combination with finalizers) weak hash tables.
      &lt;/p>&lt;p>Much of this specification is derived with
      thanks from the MIT Scheme Reference Manual.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Fri, 06 Nov 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 123: Generic accessor and modifier operators</title><link>https://srfi.schemers.org/srfi-123/</link><guid>https://srfi.schemers.org/srfi-123</guid><description>SRFI 123 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Lisp dialects including Scheme have
      traditionally lacked short, simple, generic syntax for accessing and
      modifying the fields of arbitrary "collection" objects. We fill this gap
      for Scheme by defining generalized accessors, and an associated SRFI-17
      setter.&lt;/p>&lt;/blockquote></description><dc:creator>Taylan Ulrich Bayırlı/Kammer</dc:creator><pubDate>Wed, 14 Oct 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 117: Queues based on lists</title><link>https://srfi.schemers.org/srfi-117/</link><guid>https://srfi.schemers.org/srfi-117</guid><description>SRFI 117 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>List queues are mutable ordered collections
      that can contain any Scheme object. Each list queue is based on an
      ordinary Scheme list containing the elements of the list queue by
      maintaining pointers to the first and last pairs of the list. It's cheap
      to add or remove elements from the front of the list or to add elements
      to the back, but not to remove elements from the back. List queues are
      disjoint from other types of Scheme objects.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Tue, 25 Aug 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 120: Timer APIs</title><link>https://srfi.schemers.org/srfi-120/</link><guid>https://srfi.schemers.org/srfi-120</guid><description>SRFI 120 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines interfaces to handle timer
      processes.&lt;/p>&lt;/blockquote></description><dc:creator>Takashi Kato</dc:creator><pubDate>Thu, 06 Aug 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 118: Simple adjustable-size strings</title><link>https://srfi.schemers.org/srfi-118/</link><guid>https://srfi.schemers.org/srfi-118</guid><description>SRFI 118 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Scheme specifies mutable fixed-length strings.
      We add two procedures &lt;code>string-append!&lt;/code> and
      &lt;code>string-replace!&lt;/code> which allow the size of the string to
      change. We also require that the standard Scheme procedures
      &lt;code>make-string&lt;/code> and &lt;code>string-copy&lt;/code> return
      variable-size strings.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Tue, 07 Jul 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 119: wisp: simpler indentation-sensitive scheme</title><link>https://srfi.schemers.org/srfi-119/</link><guid>https://srfi.schemers.org/srfi-119</guid><description>SRFI 119 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes a simple syntax which
      allows making scheme easier to read for newcomers while keeping the
      simplicity, generality and elegance of s-expressions. Similar to &lt;a href="https://srfi.schemers.org/srfi-110/">SRFI 110&lt;/a>, &lt;a href="/srfi-49/">SRFI 49&lt;/a> and Python it
      uses indentation to group expressions. Like &lt;a href="https://srfi.schemers.org/srfi-110/">SRFI
      110&lt;/a> wisp is general and homoiconic.
      &lt;/p>&lt;p>Different from its predecessors, wisp only uses
      the absolute minimum of additional syntax-elements which are required for
      writing and exchanging arbitrary code-structures. As syntax elements it
      only uses a colon surrounded by whitespace, the period followed by
      whitespace as first code-character on the line and optional underscores
      followed by whitespace at the beginning of the line.
      &lt;/p>&lt;p>It resolves a limitation of &lt;a href="https://srfi.schemers.org/srfi-110/">SRFI 110&lt;/a> and &lt;a href="/srfi-49/">SRFI 49&lt;/a>, both of
      which force the programmer to use a single argument per line if the
      arguments to a procedure need to be continued after a
      procedure-call.
      &lt;/p>&lt;p>Wisp expressions can include arbitrary
      s-expressions and as such provide backwards compatibility.
      &lt;blockquote>
        &lt;table>
          &lt;tr>
            &lt;th>wisp
            &lt;th>s-exp
          &lt;tr>
            &lt;td>
              &lt;pre>
&lt;b>define&lt;/b> : &lt;i>factorial&lt;/i> n
__  &lt;b>if&lt;/b> : &lt;i>zero?&lt;/i> n
____   . 1
____   &lt;i>*&lt;/i> n : &lt;i>factorial&lt;/i> (- n 1)

&lt;i>display&lt;/i> : &lt;i>factorial&lt;/i> 5
&lt;i>newline&lt;/i>
&lt;/pre>
            &lt;/td>&lt;td>
              &lt;pre>
(&lt;b>define&lt;/b> (&lt;i>factorial&lt;/i> n)
    (&lt;b>if&lt;/b> (&lt;i>zero?&lt;/i> n)
       1
       (&lt;i>*&lt;/i> n (&lt;i>factorial&lt;/i> (- n 1)))))

(&lt;i>display&lt;/i> (&lt;i>factorial&lt;/i> 5))
(&lt;i>newline&lt;/i>)
&lt;/pre>
        &lt;/td>&lt;/tr>&lt;/th>&lt;/th>&lt;/tr>&lt;/table>
      &lt;/blockquote>&lt;/p>&lt;/blockquote></description><dc:creator>Arne Babenhauserheide</dc:creator><pubDate>Tue, 23 Jun 2015 12:00:00 -0800</pubDate></item><item><title>SRFI 113: Sets and bags</title><link>https://srfi.schemers.org/srfi-113/</link><guid>https://srfi.schemers.org/srfi-113</guid><description>SRFI 113 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;em>Sets&lt;/em> and &lt;em>bags&lt;/em> (also known as
      multisets) are unordered collections that can contain any Scheme object.
      Sets enforce the constraint that no two elements can be the same in the
      sense of the set's associated &lt;em>equality predicate&lt;/em>; bags do
      not.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Fri, 28 Nov 2014 12:00:00 -0800</pubDate></item><item><title>SRFI 116: Immutable List Library</title><link>https://srfi.schemers.org/srfi-116/</link><guid>https://srfi.schemers.org/srfi-116</guid><description>SRFI 116 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Scheme currently does not provide immutable
      pairs corresponding to its existing mutable pairs, although most uses of
      pairs do not exploit their mutability. The &lt;a href="http://www.racket-lang.org">Racket&lt;/a> system takes the radical approach
      of making Scheme's pairs immutable, and providing a minimal library of
      mutable pairs with procedures named &lt;code>mpair?, mcons, mcar, mcdr,
      set-mcar!, set-mcdr!&lt;/code>. This SRFI takes the opposite approach of
      leaving Scheme's pairs unchanged and providing a full set of routines for
      creating and dealing with immutable pairs. The sample implementation is
      portable (to systems with SRFI 9) and efficient.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Fri, 28 Nov 2014 12:00:00 -0800</pubDate></item><item><title>SRFI 115: Scheme Regular Expressions</title><link>https://srfi.schemers.org/srfi-115/</link><guid>https://srfi.schemers.org/srfi-115</guid><description>SRFI 115 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI provides a library for matching
      strings with regular expressions described using the SRE "Scheme Regular
      Expression" notation first introduced by SCSH, and extended heavily by
      IrRegex.&lt;/p>&lt;/blockquote></description><dc:creator>Alex Shinn</dc:creator><pubDate>Mon, 14 Jul 2014 12:00:00 -0800</pubDate></item><item><title>SRFI 107: XML reader syntax</title><link>https://srfi.schemers.org/srfi-107/</link><guid>https://srfi.schemers.org/srfi-107</guid><description>SRFI 107 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>We specify a reader extension that reads data
      in a superset of XML/HTML format, and produces conventional
      S-expressions. We also suggest a possible semantics interpretation of how
      these forms may be evaluated to produce XML-node values, but this is
      non-normative.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Sun, 22 Dec 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 112: Environment Inquiry</title><link>https://srfi.schemers.org/srfi-112/</link><guid>https://srfi.schemers.org/srfi-112</guid><description>SRFI 112 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This is a proposal for environment inquiry,
      providing human-readable information &lt;em>at run time&lt;/em> about the
      hardware and software configuration on which a Scheme program is being
      executed. They are mostly based on Common Lisp, with additions from the
      Posix &lt;code>uname()&lt;/code> system call.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Thu, 12 Sep 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 110: Sweet-expressions (t-expressions)</title><link>https://srfi.schemers.org/srfi-110/</link><guid>https://srfi.schemers.org/srfi-110</guid><description>SRFI 110 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes a set of syntax extensions
      for Scheme, called sweet-expressions (t-expressions), that has the same
      descriptive power as s-expressions but is designed to be easier for
      humans to read. The sweet-expression syntax enables the use of
      syntactically-meaningful indentation to group expressions (similar to
      Python), and it builds on the infix and traditional function notation
      defined in &lt;a href="https://srfi.schemers.org/srfi-105/">SRFI-105 (curly-infix-expressions)&lt;/a>.
      Unlike nearly all past efforts to improve s-expression readability,
      sweet-expressions are general (the notation is independent from any
      underlying semantic) and homoiconic (the underlying data structure is
      clear from the syntax). This notation was developed by the “&lt;a href="http://readable.sourceforge.net/">Readable Lisp S-expressions
      Project&lt;/a>” and can be used for both programs and data.
      &lt;/p>&lt;p>Sweet-expressions can be considered a set of
      additional abbreviations, just as &lt;code>'x&lt;/code> already abbreviates
      &lt;code>(quote x)&lt;/code>. Sweet-expressions and traditionally formatted
      s-expressions can be freely mixed; this provides backwards compatibility,
      simplifies transition, and enables developers to maximize readability.
      Here is an example of a sweet-expression and its equivalent s-expression
      (note that a sweet-expression reader would accept &lt;em>either&lt;/em>
      format):
      &lt;table border="1" cellpadding="4">
        &lt;tr>
          &lt;th>sweet-expression
          &lt;th>s-expression
        &lt;tr>
          &lt;td>
            &lt;pre>
define fibfast(n)   ; Typical function notation
  if {n &amp;lt; 2}        ; Indentation, infix {...}
     n              ; Single expr = no new list
     fibup n 2 1 0  ; Simple function calls
&lt;/pre>
          &lt;/td>&lt;td>
            &lt;pre>
(define (fibfast n)
  (if (&amp;lt; n 2)
      n
      (fibup n 2 1 0)))
&lt;/pre>
      &lt;/td>&lt;/tr>&lt;/th>&lt;/th>&lt;/tr>&lt;/table>&lt;/p>&lt;/blockquote></description><dc:creator>David A. Wheeler and Alan Manuel K. Gloria</dc:creator><pubDate>Mon, 09 Sep 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 106: Basic socket interface</title><link>https://srfi.schemers.org/srfi-106/</link><guid>https://srfi.schemers.org/srfi-106</guid><description>SRFI 106 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies basic socket
      interfaces.&lt;/p>&lt;/blockquote></description><dc:creator>Takashi Kato</dc:creator><pubDate>Tue, 20 Aug 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 111: Boxes</title><link>https://srfi.schemers.org/srfi-111/</link><guid>https://srfi.schemers.org/srfi-111</guid><description>SRFI 111 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Boxes are objects with a single mutable state.
      Several Schemes have them, sometimes called &lt;i>cells&lt;/i>. A constructor,
      predicate, accessor, and mutator are provided.&lt;/p>&lt;/blockquote></description><dc:creator>John Cowan</dc:creator><pubDate>Wed, 03 Jul 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 108: Named quasi-literal constructors</title><link>https://srfi.schemers.org/srfi-108/</link><guid>https://srfi.schemers.org/srfi-108</guid><description>SRFI 108 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This specifies an extensible reader syntax for
      named value constructors. A reader prefix is followed by a &lt;q>tag&lt;/q> (an
      identifier), and then expressions and literal text parameters. The tag
      can be though of as a class name, and the expression and literal text are
      arguments to an object constructor call. The reader translates
      &lt;code>&amp;amp;&lt;var>tag&lt;/var>{...}&lt;/code> to a list
      &lt;code>($construct$:&lt;var>tag&lt;/var> ...)&lt;/code>, where
      &lt;code>$construct$:&lt;var>tag&lt;/var>&lt;/code> is normally bound to a predefined
      macro.
      &lt;/p>&lt;p>This propsal depends on &lt;a href="https://srfi.schemers.org/srfi-109/">SRFI-109 (extended string quasi-literals)&lt;/a> (in spite of
      having a lower number). It also shares quite of bit of syntax with
      &lt;a href="https://srfi.schemers.org/srfi-107/">SRFI-107 (XML reader syntax)&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Fri, 21 Jun 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 109: Extended string quasi-literals</title><link>https://srfi.schemers.org/srfi-109/</link><guid>https://srfi.schemers.org/srfi-109</guid><description>SRFI 109 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This specifies a reader extension for extended
      string quasi-literals, including nicer multi-line strings, and enclosed
      unquoted expressions.
      &lt;/p>&lt;p>This proposal is related to &lt;a href="https://srfi.schemers.org/srfi-108/">SRFI-108 (named quasi-literal constructors)&lt;/a> and &lt;a href="/srfi-107/">SRFI-107 (XML reader syntax)&lt;/a>, as they share quite a bit
      of syntax.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Fri, 21 Jun 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 103: Library Files</title><link>https://srfi.schemers.org/srfi-103/</link><guid>https://srfi.schemers.org/srfi-103</guid><description>SRFI 103 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a standard for locating files
      containing libraries with list-of-symbols library names, for unixes and
      Windows. It defines a standard for files containing R6RS libraries. It
      supports different Scheme dialects.&lt;/p>&lt;/blockquote></description><dc:creator>Derick Eddington</dc:creator><pubDate>Wed, 08 May 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 101: Purely Functional Random-Access Pairs and Lists</title><link>https://srfi.schemers.org/srfi-101/</link><guid>https://srfi.schemers.org/srfi-101</guid><description>SRFI 101 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Random-access lists [1] are a purely functional
      data structure for representing lists of values. A random-access list may
      act as a drop in replacement for the usual linear-access pair and list
      data structures (&lt;code>pair?&lt;/code>, &lt;code>cons&lt;/code>, &lt;code>car&lt;/code>,
      &lt;code>cdr&lt;/code>), which additionally supports fast index-based
      addressing and updating (&lt;code>list-ref&lt;/code>, &lt;code>list-set&lt;/code>).
      The impact is a whole class of purely-functional algorithms expressed in
      terms of index-based list addressing become feasible compared with their
      linear-access list counterparts.
      &lt;/p>&lt;p>This document proposes a library API for purely
      functional random-access lists consistent with the R&lt;sup>6&lt;/sup>RS [2]
      base library and list utility standard library [3].&lt;/p>&lt;/blockquote></description><dc:creator>David Van Horn</dc:creator><pubDate>Sun, 24 Feb 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 102: Procedure Arity Inspection</title><link>https://srfi.schemers.org/srfi-102/</link><guid>https://srfi.schemers.org/srfi-102</guid><description>SRFI 102 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Many Scheme systems provide mechanisms for
      inspecting the arity of a procedural value, making it a common feature,
      however there is no standard interface. As a result there is no portable
      way to observe the arity of a procedure &lt;em>without actually applying
      it&lt;/em>. This SRFI proposes a simple interface that is consistent with
      existing Scheme systems' facilities and prior proposals.&lt;/p>&lt;/blockquote></description><dc:creator>David Van Horn</dc:creator><pubDate>Sun, 24 Feb 2013 12:00:00 -0800</pubDate></item><item><title>SRFI 105: Curly-infix-expressions</title><link>https://srfi.schemers.org/srfi-105/</link><guid>https://srfi.schemers.org/srfi-105</guid><description>SRFI 105 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Lisp-based languages, like Scheme, are almost
      the only programming languages in modern use that do not support infix
      notation. In addition, most languages allow infix expressions to be
      combined with function call notation of the form
      &lt;code>&lt;var>f&lt;/var>(&lt;var>x&lt;/var>)&lt;/code>. This SRFI provides these
      capabilities, both for developers who already use Scheme and want these
      conveniences, and also for other developers who may choose to use other
      languages in part because they miss these conveniences. Scheme currently
      reserves &lt;code>{&lt;/code>...&lt;code>}&lt;/code> “for possible future extensions
      to the language”. We propose that &lt;code>{&lt;/code>...&lt;code>}&lt;/code> be used
      to support “curly-infix-expression” notation as a homoiconic infix
      abbreviation, as a modification of the Scheme reader. It is an
      abbreviation in much the same way that &lt;samp>'x&lt;/samp> is an abbreviation
      for &lt;samp>(quote x)&lt;/samp>.
      &lt;/p>&lt;p>A &lt;dfn>curly-infix list&lt;/dfn> introduces a list
      whose visual presentation can be in infix order instead of prefix order.
      For example, &lt;samp>{n > 5}&lt;/samp> ⇒
      &lt;samp>(> n 5)&lt;/samp>, and
      &lt;samp>{a + b + c}&lt;/samp> ⇒
      &lt;samp>(+ a b c)&lt;/samp>. By intent, there is no precedence,
      but e.g., &lt;samp>{x + {y * z}}&lt;/samp> maps cleanly to
      &lt;samp>(+ x (* y z))&lt;/samp>. Forms with mixed infix
      operators and other complications have “&lt;code>$nfx$&lt;/code>” prepended to
      enable later processing, e.g.,
      &lt;samp>{4 + 5 * 6}&lt;/samp> ⇒
      &lt;samp>($nfx$ 4 + 5 * 6)&lt;/samp>. Also, inside a
      curly-infix list (recursively), expressions of the form
      &lt;code>&lt;var>f&lt;/var>(&lt;/code>...&lt;code>)&lt;/code> are simply an abbreviation
      for &lt;code>(&lt;var>f&lt;/var> &lt;/code>...&lt;code>)&lt;/code>.
      &lt;/p>&lt;p>Note that this is derived from the “&lt;a href="http://readable.sourceforge.net/">readable&lt;/a>” project. We intend to
      later submit at least one additional SRFI that will build on top of this
      SRFI, but curly-infix-expressions are useful on their own.&lt;/p>&lt;/blockquote></description><dc:creator>David A. Wheeler and Alan Manuel K. Gloria</dc:creator><pubDate>Tue, 06 Nov 2012 12:00:00 -0800</pubDate></item><item><title>SRFI 100: define-lambda-object</title><link>https://srfi.schemers.org/srfi-100/</link><guid>https://srfi.schemers.org/srfi-100</guid><description>SRFI 100 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI introduces a macro,
      DEFINE-LAMBDA-OBJECT which defines a set of procedures, that is, a group,
      two constructors, and a predicate. The constructors also make a group of
      procedures, namely lambda objects. The macro extends DEFINE-RECORD-TYPE
      (SRFI 9) in being more general but much less general than DEFCLASS
      (CLOS). The macro has no explicit field accessors and mutators but parent
      groups, required fields, optional fields, automatic fields, read-write
      fields, read-only fields, inaccessible hidden fields, immutable virtual
      fields, and common sharing fields.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Mon, 21 Jun 2010 12:00:00 -0800</pubDate></item><item><title>SRFI 104: Library Files Utilities</title><link>https://srfi.schemers.org/srfi-104/</link><guid>https://srfi.schemers.org/srfi-104</guid><description>SRFI 104 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI implements &lt;a href="https://srfi.schemers.org/srfi-103/">SRFI 103: Library Files&lt;/a> as a library. It is useful
      for working with library files.&lt;/p>&lt;/blockquote></description><dc:creator>Derick Eddington</dc:creator><pubDate>Sun, 23 May 2010 12:00:00 -0800</pubDate></item><item><title>SRFI 99: ERR5RS Records</title><link>https://srfi.schemers.org/srfi-99/</link><guid>https://srfi.schemers.org/srfi-99</guid><description>SRFI 99 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Many Scheme programmers have considered records
      to be one of the most important features missing from the R5RS. The R6RS
      proposed a record system, but its design has been widely criticized and
      it was not intended for use in R5RS programs anyway.
      &lt;/p>&lt;p>This SRFI proposes a better record system for
      use in R5RS, ERR5RS, and R6RS programs. The syntactic layer of this
      SRFI's record system is an extension of SRFI 9. The procedural and
      inspection layers of this SRFI's record system are perfectly compatible
      with its syntactic layer. This entire SRFI is compatible with the
      procedural and inspection layers of the R6RS record system, but offers
      several worthwhile improvements over the R6RS system.&lt;/p>&lt;/blockquote></description><dc:creator>William D Clinger</dc:creator><pubDate>Wed, 07 Oct 2009 12:00:00 -0800</pubDate></item><item><title>SRFI 97: SRFI Libraries</title><link>https://srfi.schemers.org/srfi-97/</link><guid>https://srfi.schemers.org/srfi-97</guid><description>SRFI 97 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Over the past ten years, numerous libraries
      have been specified via the Scheme Requests for Implementation process.
      Yet until the recent ratification of the Revised&lt;sup>6&lt;/sup> Report on
      the Algorithmic Language Scheme, there has been no standardized way of
      distributing or relying upon library code. Now that such a library system
      exists, there is a real need to organize these existing SRFI libraries so
      that they can be portably referenced.
      &lt;/p>&lt;p>This SRFI is designed to facilitate the writing
      and distribution of code that relies on SRFI libraries. It identifies a
      subset of existing SRFIs that specify features amenable to provision (and
      possibly implementation) as libraries (SRFI Libraries) and proposes a
      naming convention for this subset so that these libraries may be referred
      to by name or by number. &lt;!-- 
This convention represents a consensus among current R&lt;sup>6&lt;/sup>RS
implementors.
       -->&lt;/p>&lt;/blockquote></description><dc:creator>David Van Horn</dc:creator><pubDate>Mon, 22 Dec 2008 12:00:00 -0800</pubDate></item><item><title>SRFI 98: An interface to access environment variables</title><link>https://srfi.schemers.org/srfi-98/</link><guid>https://srfi.schemers.org/srfi-98</guid><description>SRFI 98 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies the procedure
      get-environment-variable, which gets the value of the specified
      environment variable, and the procedure get-environment-variables, which
      gets an association list of all environment variables.&lt;/p>&lt;/blockquote></description><dc:creator>Taro Minowa (Higepon)</dc:creator><pubDate>Fri, 19 Sep 2008 12:00:00 -0800</pubDate></item><item><title>SRFI 96: SLIB Prerequisites</title><link>https://srfi.schemers.org/srfi-96/</link><guid>https://srfi.schemers.org/srfi-96</guid><description>SRFI 96 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies a set of procedures and
      macros presenting a uniform interface sufficient to host the &lt;a href="http://swiss.csail.mit.edu/~jaffer/SLIB">SLIB Scheme Library&lt;/a>
      system.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Mon, 07 Jul 2008 12:00:00 -0800</pubDate></item><item><title>SRFI 41: Streams</title><link>https://srfi.schemers.org/srfi-41/</link><guid>https://srfi.schemers.org/srfi-41</guid><description>SRFI 41 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;span class="c1">Streams, sometimes called
      lazy lists, are a sequential data structure containing elements computed
      only on demand. A stream is either null or is a pair with a stream in its
      cdr. Since elements of a stream are computed only when accessed, streams
      can be infinite. Once computed, the value of a stream element is cached
      in case it is needed again.&lt;/span>
      &lt;/p>&lt;p>&lt;span class="c1">Streams without memoization
      were first described by Peter Landin in 1965. Memoization became accepted
      as an essential feature of streams about a decade later. Today, streams
      are the signature data type of functional programming languages such as
      Haskell.&lt;/span>
      &lt;/p>&lt;p>&lt;span class="c1">This Scheme Request for
      Implementation describes two libraries for operating on streams: a
      canonical set of stream primitives and a set of procedures and syntax
      derived from those primitives that permits convenient expression of
      stream operations. They rely on facilities provided by R6RS, including
      libraries, records, and error reporting. To load both stream libraries,
      say:&lt;/span>
      &lt;/p>&lt;p>&lt;span class="c2">(import (streams))&lt;/span>&lt;/p>&lt;/blockquote></description><dc:creator>Philip L. Bewig</dc:creator><pubDate>Thu, 24 Jan 2008 12:00:00 -0800</pubDate></item><item><title>SRFI 89: Optional positional and named parameters</title><link>https://srfi.schemers.org/srfi-89/</link><guid>https://srfi.schemers.org/srfi-89</guid><description>SRFI 89 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies the &lt;code>define*&lt;/code> and
      &lt;code>lambda*&lt;/code> special forms. These forms extend the R5RS
      &lt;code>define&lt;/code> and &lt;code>lambda&lt;/code> special forms to simplify the use of
      optional positional and named parameters. Optional positional parameters,
      optional named parameters and required named parameters are covered by
      this SRFI. The formal parameter list syntax specified in this SRFI is
      different from the syntax used by Common Lisp and the DSSSL languages but
      nevertheless offers similar functionality and a nicer syntax. Formal
      parameter lists which conform to the R5RS syntax have the same meaning as
      in R5RS.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Tue, 10 Jul 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 90: Extensible hash table constructor</title><link>https://srfi.schemers.org/srfi-90/</link><guid>https://srfi.schemers.org/srfi-90</guid><description>SRFI 90 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies the procedure
      &lt;code>make-table&lt;/code>, a hash table constructor compatible with &lt;a href="https://srfi.schemers.org/srfi-69/">SRFI 69 (Basic hash tables)&lt;/a>. The procedure
      &lt;code>make-table&lt;/code> allows various parameters of the hash table to be
      specified with optional named parameters when it is constructed. These
      parameters are: the initial size, the minimum and maximum load factor,
      the key equivalence function, the key hashing function, whether the
      references to the keys are weak, and similarly for the values. By using
      optional named parameters, as specified in &lt;a href="https://srfi.schemers.org/srfi-89/">SRFI 89
      (Optional positional and named parameters)&lt;/a>, the constructor's API can
      be easily extended in a backward compatible way by other SRFIs and Scheme
      implementations.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Tue, 10 Jul 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 91: Extended ports</title><link>https://srfi.schemers.org/srfi-91/</link><guid>https://srfi.schemers.org/srfi-91</guid><description>SRFI 91 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies an extension to the R5RS
      ports that supports several useful features: binary I/O and text I/O,
      bulk I/O, file opening attributes, and bidirectional ports. Binary I/O is
      provided through byte ports which are ports whose fundamental I/O unit is
      an 8 bit byte. Because characters can be encoded with bytes using a
      character encoding such as ISO 8859-1, UTF-8, and UTF-16BE, any byte port
      is also a character port (a port that supports the character level I/O of
      R5RS). A byte port's character encoding and various other attributes are
      specified when the port is opened. Because reasonable defaults exist,
      these attributes are specified using a named optional parameter syntax.
      All procedures which have the same name as in R5RS are compatible with
      R5RS but may provide additional functionality.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Tue, 10 Jul 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 88: Keyword objects</title><link>https://srfi.schemers.org/srfi-88/</link><guid>https://srfi.schemers.org/srfi-88</guid><description>SRFI 88 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines &lt;i>keyword&lt;/i> objects, a
      data type similar to Scheme symbols. Keyword objects have the same
      lexical syntax as symbols but they must end in a colon. Moreover keyword
      objects are self-evaluating. Procedures for converting between strings
      and keyword objects (&lt;code>string->keyword&lt;/code> and
      &lt;code>keyword->string&lt;/code>) and a type predicate (&lt;code>keyword?&lt;/code>) are
      defined. Finally this SRFI specifies the changes to the Scheme lexical
      syntax required to accomodate keywords.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Tue, 03 Jul 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 92: ALAMBDA and ALAMBDA*</title><link>https://srfi.schemers.org/srfi-92/</link><guid>https://srfi.schemers.org/srfi-92</guid><description>SRFI 92 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI introduces ALAMBDA and ALAMBDA*, each
      of which has two modes of operation:
      &lt;ol>
        &lt;li>it creates a procedure that checks actual
        arguments and takes optional arguments,
        &lt;/li>&lt;li>it returns a different procedure by checking
        each of actual arguments and the number of them.
      &lt;/li>&lt;/ol>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Mon, 09 Apr 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 94: Type-Restricted Numerical Functions</title><link>https://srfi.schemers.org/srfi-94/</link><guid>https://srfi.schemers.org/srfi-94</guid><description>SRFI 94 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>In the coding of numerial calculations in
      latent-typed languages it is good practice to assure that those
      calculations are using the intended number system. The most common number
      systems for programmatic calculations are the integers, reals, and
      complexes. This SRFI introduces 14 real-only and 3 integer-only variants
      of R5RS procedures to facilitate numerical type checking and
      declaration.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Tue, 30 Jan 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 95: Sorting and Merging</title><link>https://srfi.schemers.org/srfi-95/</link><guid>https://srfi.schemers.org/srfi-95</guid><description>SRFI 95 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Sorting and Merging are useful operations
      deserving a common API.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Mon, 29 Jan 2007 12:00:00 -0800</pubDate></item><item><title>SRFI 80: Stream I/O</title><link>https://srfi.schemers.org/srfi-80/</link><guid>https://srfi.schemers.org/srfi-80</guid><description>SRFI 80 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines an I/O layer for lazy, mostly
      functional buffered streams.
      &lt;/p>&lt;p>The layer architecture is similar to the upper
      three layers of the I/O subsystem in &lt;a href="http://www.standardml.org/Basis/">The Standard ML Basis
      Library&lt;/a>.
      &lt;/p>&lt;p>In particular, this layer provides
      &lt;ul>
        &lt;li>buffered reading and writing
        &lt;/li>&lt;li>arbitrary lookahead
        &lt;/li>&lt;li>dynamic redirection of input or
        output
        &lt;/li>&lt;li>binary and text I/O, mixed if needed
        &lt;/li>&lt;li>translated data streams
        &lt;/li>&lt;li>the ability to create I/O streams from
        arbitrary readers and writers
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>It builds on the Primitive I/O layer specified
      in &lt;a href="https://srfi.schemers.org/srfi-79/">SRFI 79 (Primitive I/O)&lt;/a>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Mon, 20 Nov 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 81: Port I/O</title><link>https://srfi.schemers.org/srfi-81/</link><guid>https://srfi.schemers.org/srfi-81</guid><description>SRFI 81 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines an I/O layer similar in
      nature to the ports subsystem in R5RS, and provides conventional,
      imperative buffered input and output.
      &lt;/p>&lt;p>The layer architecture is similar to the upper
      three layers of the I/O subsystem in &lt;a href="http://www.standardml.org/Basis/">The Standard ML Basis
      Library&lt;/a>.
      &lt;/p>&lt;p>In particular, the subsystem fulfills the
      following requirements:
      &lt;ul>
        &lt;li>buffered reading and writing
        &lt;/li>&lt;li>binary and text I/O, mixed if needed
        &lt;/li>&lt;li>the ability to create arbitrary I/O ports
        from readers and writers
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>It builds on the Primitive I/O layer specified
      in &lt;a href="https://srfi.schemers.org/srfi-79/">SRFI 79 (Primitive I/O)&lt;/a>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Mon, 20 Nov 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 82: Stream Ports</title><link>https://srfi.schemers.org/srfi-82/</link><guid>https://srfi.schemers.org/srfi-82</guid><description>SRFI 82 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI augments &lt;a href="https://srfi.schemers.org/srfi-81/">SRFI 81
      (Port I/O)&lt;/a> by allowing ports to be constructed from streams as
      described in &lt;a href="https://srfi.schemers.org/srfi-80/">SRFI 80 (Stream I/O)&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Mon, 20 Nov 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 79: Primitive I/O</title><link>https://srfi.schemers.org/srfi-79/</link><guid>https://srfi.schemers.org/srfi-79</guid><description>SRFI 79 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a simple, primitive I/O
      subsystem for Scheme that is intended to function as the lowest layer of
      a more comprehensive suite of I/O layers. It provides unbuffered I/O, and
      is close to what a typical operating system offers. Thus, its interface
      is suitable for implementing high-throughput and zero-copy I/O.
      &lt;/p>&lt;p>The Primitive I/O layer also allows clients to
      implement custom data sources and sinks via a simple interface.
      &lt;/p>&lt;p>Moreover, this SRFI defines a condition
      hierarchy specifying common I/O-related exceptional situations.
      &lt;/p>&lt;p>The Primitive I/O layer only handles
      blocking-I/O. Non-blocking and selective I/O is left for another
      SRFI.
      &lt;/p>&lt;p>This I/O layer was designed in conjunction with
      two other layers that can be built on top of it: &lt;a href="https://srfi.schemers.org/srfi-80/">SRFI
      80 (Stream I/O)&lt;/a> and &lt;a href="https://srfi.schemers.org/srfi-81/">SRFI 81 (Port I/O)&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Thu, 16 Nov 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 84: Universal Identifiers</title><link>https://srfi.schemers.org/srfi-84/</link><guid>https://srfi.schemers.org/srfi-84</guid><description>SRFI 84 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a social convention to allow
      programmers to easily create short, simple Scheme symbols which are
      guaranteed to be universally unique: No other programmer also following
      this SRFI will accidentally create a symbol eq? to yours.
      &lt;/p>&lt;p>Universally unique symbols are useful to
      identify standards, languages, libraries, types, classes, and other
      resources.&lt;/p>&lt;/blockquote></description><dc:creator>Andrew Wilcox</dc:creator><pubDate>Thu, 09 Nov 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 85: Recursive Equivalence Predicates</title><link>https://srfi.schemers.org/srfi-85/</link><guid>https://srfi.schemers.org/srfi-85</guid><description>SRFI 85 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines two related equivalence
      predicates that are recursive, not just partial recursive: they terminate
      on all arguments. One of these predicates, &lt;code>equiv?&lt;/code>, is
      consistent with the &lt;code>equal?&lt;/code> procedure described in the R5RS:
      Whenever &lt;code>equal?&lt;/code> terminates, &lt;code>equiv?&lt;/code> returns the
      same value as &lt;code>equal?&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>William D Clinger</dc:creator><pubDate>Sat, 21 Oct 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 87: => in case clauses</title><link>https://srfi.schemers.org/srfi-87/</link><guid>https://srfi.schemers.org/srfi-87</guid><description>SRFI 87 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes an extension to the
      &lt;code>case&lt;/code> syntax to allow the &lt;code>=>&lt;/code> clauses as in
      &lt;code>cond&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Chongkai Zhu</dc:creator><pubDate>Wed, 18 Oct 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 77: Preliminary Proposal for R6RS Arithmetic</title><link>https://srfi.schemers.org/srfi-77/</link><guid>https://srfi.schemers.org/srfi-77</guid><description>SRFI 77 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Scheme's arithmetic system was designed to
      allow a wide variety of implementations. After many years of
      implementation experience, however, most implementations now fall into a
      small number of categories, and the benefits of continued experimentation
      no longer justify the confusion and portability problems that have
      resulted from giving implementations so much freedom in this area.
      Moreover, the R5RS generic arithmetic is difficult to implement as
      efficiently as purely fixnum or purely flonum arithmetic. (Fixnum
      arithmetic is typically limited-precision integer arithmetic implemented
      using one or more representations that may be especially efficient on the
      executing machine; flonum arithmetic is typically limited-precision
      floating-point arithmetic using one or more representations that may be
      especially efficient on the executing machine.)
      &lt;/p>&lt;p>This SRFI is an effort to extend and clarify
      the R5RS arithmetic to make it more portable, more comprehensive, and
      enable faster programs.
      &lt;/p>&lt;p>Furthermore, one of us (Sperber) has argued
      that Scheme's arithmetic requires radical overhaul. The other (Clinger)
      agrees that revisions are needed. Whether these revisions qualify as
      radical is best left to the judgement of individual readers.
      &lt;/p>&lt;p>This SRFI proposes to revise section 6.2
      ("Numbers") of R5RS by:
      &lt;ul>
        &lt;li>requiring a Scheme implementation to provide
        the full tower, including exact rationals of arbitrary precision, exact
        rectangular complex numbers with rational real and imaginary parts, and
        inexact real and complex arithmetic
        &lt;/li>&lt;li>defining fixnum arithmetic (parameterized by
        precision)
        &lt;/li>&lt;li>defining flonum arithmetic
        (inexactly)
        &lt;/li>&lt;li>defining new procedures for performing exact
        arithmetic
        &lt;/li>&lt;li>defining new procedures for performing
        inexact arithmetic
        &lt;/li>&lt;li>describing the external representation and
        semantics of 0.0, -0.0, infinities and NaNs for systems that implement
        inexact real arithmetic using IEEE binary floating point&amp;lt;?
        &lt;/li>&lt;li>changing the specification of
        &lt;code>eqv?&lt;/code> to behave more sensibly with inexact numbers
        &lt;/li>&lt;li>defining Scheme's real numbers to be the
        complex numbers whose imaginary part is an exact zero
        &lt;/li>&lt;li>adding an external representation for
        inexact numbers that expresses the precision of a binary floating point
        representation
        &lt;/li>&lt;li>defining procedures for some new operations,
        including integer division and remainder on real numbers, and bitwise
        operations,
        &lt;/li>&lt;li>restricting the domains of some R5RS
        procedures
        &lt;/li>&lt;li>clarifying the semantics of some R5RS
        procedures
        &lt;/li>&lt;li>possibly changing the semantics of some R5RS
        procedures
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>William D Clinger and Michael Sperber</dc:creator><pubDate>Wed, 13 Sep 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 83: R6RS Library Syntax</title><link>https://srfi.schemers.org/srfi-83/</link><guid>https://srfi.schemers.org/srfi-83</guid><description>SRFI 83 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>The module system presented here is designed to
      let programmers share libraries, i.e., code that is intended to be
      incorporated into larger programs, and especially into programs that use
      library code from multiple sources. The module system supports macro
      definitions within modules, allows macro exports, and distinguishes the
      phases in which definitions and imports are needed. This SRFI defines a
      standard notation for libraries, a semantics for library expansion and
      execution, and a simple format for sharing libraries.
      &lt;!--  ISSUES  -->&lt;/p>&lt;/blockquote></description><dc:creator>Matthew Flatt and Kent Dybvig</dc:creator><pubDate>Wed, 13 Sep 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 93: R6RS Syntax-Case Macros</title><link>https://srfi.schemers.org/srfi-93/</link><guid>https://srfi.schemers.org/srfi-93</guid><description>SRFI 93 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>The syntactic abstraction system described here
      extends the R5RS macro system with support for writing low-level macros
      in a high-level style, with automatic syntax checking, input
      destructuring, output restructuring, maintenance of lexical scoping and
      referential transparency (hygiene), and support for controlled identifier
      capture, with constant expansion overhead. Because it does not require
      literals, including quoted lists or vectors, to be copied or even
      traversed, it preserves sharing and cycles within and among the constants
      of a program. It also supports source-object correlation, i.e., the
      maintenance of ties between the original source code and expanded output,
      allowing implementations to provide source-level support for debuggers
      and other tools.&lt;/p>&lt;/blockquote></description><dc:creator>Kent Dybvig</dc:creator><pubDate>Wed, 23 Aug 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 86: MU and NU simulating VALUES &amp; CALL-WITH-VALUES, and their related LET-syntax</title><link>https://srfi.schemers.org/srfi-86/</link><guid>https://srfi.schemers.org/srfi-86</guid><description>SRFI 86 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Unlike the
      &lt;code>values&lt;/code>/&lt;code>call-with-values&lt;/code> mechanism of R5RS, this
      SRFI uses an explicit representation for multiple return values as a
      single value, namely a procedure. Decomposition of multiple values is
      done by simple application. Each of the two macros, &lt;code>mu&lt;/code> and
      &lt;code>nu&lt;/code>, evaluates to a procedure that takes one procedure
      argument. The &lt;code>mu&lt;/code> and &lt;code>nu&lt;/code> can be compared with
      &lt;code>lambda&lt;/code>. While &lt;code>lambda&lt;/code> expression that consists
      of &amp;lt;formals> and &amp;lt;body> requires some actual arguments later
      when the evaluated &lt;code>lambda&lt;/code> expression is called,
      &lt;code>mu&lt;/code> and &lt;code>nu&lt;/code> expressions that consist of
      &amp;lt;expression>s corresponding to actual arguments of
      &lt;code>lambda&lt;/code> require &amp;lt;formals> and &amp;lt;body>, that is, an
      evaluated &lt;code>lambda&lt;/code> expression, later when the evaluated
      &lt;code>mu&lt;/code> and &lt;code>nu&lt;/code> expressions are called.
      &lt;/p>&lt;p>This SRFI also introduces new
      &lt;code>let&lt;/code>-syntax depending on &lt;code>mu&lt;/code> and &lt;code>nu&lt;/code>
      to manipulate multiple values, &lt;code>alet&lt;/code> and &lt;code>alet*&lt;/code>
      that are compatible with &lt;code>let&lt;/code> and &lt;code>let*&lt;/code> of R5RS
      in single value bindings. They also have a binding form making use of
      &lt;code>values&lt;/code> and &lt;code>call-with-values&lt;/code> to handle multiple
      values. In addition, they have several new binding forms for useful
      functions such as escape, recursion, etc.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Tue, 20 Jun 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 64: A Scheme API for test suites</title><link>https://srfi.schemers.org/srfi-64/</link><guid>https://srfi.schemers.org/srfi-64</guid><description>SRFI 64 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This defines an API for writing &lt;dfn>test
      suites&lt;/dfn>, to make it easy to portably test Scheme APIs, libraries,
      applications, and implementations. A test suite is a collection of
      &lt;dfn>test cases&lt;/dfn> that execute in the context of a
      &lt;dfn>test-runner&lt;/dfn>. This specifications also supports writing new
      test-runners, to allow customization of reporting and processing the
      result of running test suites.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Sun, 18 Jun 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 75: R6RS Unicode data</title><link>https://srfi.schemers.org/srfi-75/</link><guid>https://srfi.schemers.org/srfi-75</guid><description>SRFI 75 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Unicode is a widespread universal character
      code that supports most of the world's (natural) languages. The
      extensions to Scheme specified in this SRFI concern the support of
      Unicode in Scheme's character, string, and symbol datatypes. This SRFI
      does not (fully) specify how I/O of Unicode data is performed or how
      Scheme source code is encoded in files; these aspects are left for other
      SRFIs to specify.&lt;/p>&lt;/blockquote></description><dc:creator>Matthew Flatt and Marc Feeley</dc:creator><pubDate>Sat, 27 May 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 76: R6RS Records</title><link>https://srfi.schemers.org/srfi-76/</link><guid>https://srfi.schemers.org/srfi-76</guid><description>SRFI 76 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes abstractions for creating
      new data types representing records - data structures with named fields.
      This SRFI comes in four parts:
      &lt;ul>
        &lt;li>a procedural layer for creating and
        manipulating record types and record instances
        &lt;/li>&lt;li>an explicit-naming syntactic layer for
        defining the various entities associated with a record type -
        construction procedure, predicate, field accessors, mutators, etc. - at
        once
        &lt;/li>&lt;li>an implicit-naming syntactic layer built on
        top of the explicit-naming syntactic layer, which chooses the names for
        the various products based on the names of the record type and
        fields
        &lt;/li>&lt;li>a set of reflection procedures
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Will Clinger, R. Kent Dybvig, Michael Sperber, and Anton van Straaten</dc:creator><pubDate>Mon, 24 Apr 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 78: Lightweight testing</title><link>https://srfi.schemers.org/srfi-78/</link><guid>https://srfi.schemers.org/srfi-78</guid><description>SRFI 78 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A simple mechanism is defined for testing
      Scheme programs. As a most primitive example, the expression
      &lt;pre>
   (check (+ 1 1) => 3)
&lt;/pre>evaluates the expression &lt;code>(+ 1
1)&lt;/code> and compares the result with the expected result 3 provided after the
syntactic keyword &lt;code>=>&lt;/code>. Then the outcome of this comparison is
reported in human-readable form by printing a message of the form
      &lt;pre>
   (+ 1 1) => 2 ; *** failed ***
   ; expected result: 3
&lt;/pre>Moreover, the outcome of any executed check
is recorded in a global state counting the number of correct and failed checks
and storing the first failed check. At the end of a file, or at any other
point, the user can print a summary using &lt;code>check-report&lt;/code>.
      &lt;/p>&lt;p>In addition to the simple test above, it is
      also possible to execute a parametric sequence of checks. Syntactically,
      this takes the form of an eager comprehension in the sense of &lt;a href="https://srfi.schemers.org/srfi-42/">SRFI 42&lt;/a> [5]. For example,
      &lt;pre>
   (check-ec (:range e 100)
             (:let x (expt 2.0 e))
             (= (+ x 1) x) => #f (e x))
&lt;/pre>This statement runs the variable &lt;code>
      e&lt;/code> through {0..99} and for each binding defines &lt;code>x&lt;/code> as
      &lt;code>(expt 2.0 e)&lt;/code>. Then it is checked if &lt;code>(+ x 1)&lt;/code> is
      equal to &lt;code>x&lt;/code>, and it is expected that this is not the case
      (i.e. expected value is &lt;code>#f&lt;/code>). The trailing &lt;code>(e x)&lt;/code>
      tells the reporting mechanism to print the values of both &lt;code>e&lt;/code>
      and &lt;code>x&lt;/code> in case of a failed check. The output could look like
      this:
      &lt;pre>
   (let ((e 53) (x 9007199254740992.0)) (= (+ x 1) x)) => #t ; *** failed ***
    ; expected result: #f
&lt;/pre>The specification of bindings to report,
&lt;code>(e x)&lt;/code> in the example, is optional but very informative. Other
features of this SRFI are:
      &lt;ul>
        &lt;li>A way to specify a different equality
        predicate (default is &lt;code>equal?&lt;/code>).
        &lt;/li>&lt;li>Controlling the amount of reporting being
        printed.
        &lt;/li>&lt;li>Switching off the execution and reporting of
        checks entriely.
        &lt;/li>&lt;li>Retrieving a boolean if all checks have been
        executed and passed.
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner</dc:creator><pubDate>Mon, 06 Mar 2006 12:00:00 -0800</pubDate></item><item><title>SRFI 50: Mixing Scheme and C</title><link>https://srfi.schemers.org/srfi-50/</link><guid>https://srfi.schemers.org/srfi-50</guid><description>SRFI 50 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes an interface for calling C
      functions from Scheme, calling Scheme functions from C, and allocating
      storage in the Scheme heap. Scheme manages stub functions in C that
      negotiate between the calling conventions of Scheme and C and the memory
      allocation policies of both worlds.
      &lt;/p>&lt;p>The following facilities are available for
      interfacing between Scheme and C:
      &lt;ul>
        &lt;li>Scheme code can call C functions.
        &lt;/li>&lt;li>The external interface provides full
        introspection for all Scheme objects. External code may inspect,
        modify, and allocate Scheme objects arbitrarily.
        &lt;/li>&lt;li>External code may signal errors to the
        Scheme system.
        &lt;/li>&lt;li>External code may call back into Scheme.
        Scheme correctly unrolls the process stack on non-local exits.
        &lt;/li>&lt;li>External modules may register bindings of
        names to values with a central registry accessible from Scheme.
        Conversely, Scheme code can register shared bindings for access by C
        code.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>The interface is closely based on that of
      &lt;a href="http://www.s48.org/">Scheme 48&lt;/a> and &lt;a href="http://www.scsh.net/">scsh&lt;/a>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Richard Kelsey and Michael Sperber</dc:creator><pubDate>Tue, 20 Dec 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 66: Octet Vectors</title><link>https://srfi.schemers.org/srfi-66/</link><guid>https://srfi.schemers.org/srfi-66</guid><description>SRFI 66 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a set of procedures for
      creating, accessing, and manipulating uniform vectors of octets.&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Thu, 15 Dec 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 74: Octet-Addressed Binary Blocks</title><link>https://srfi.schemers.org/srfi-74/</link><guid>https://srfi.schemers.org/srfi-74</guid><description>SRFI 74 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a set of procedures for
      creating, accessing, and manipulating octet-addressed blocks of binary
      data, in short, &lt;i>blobs&lt;/i>. The SRFI provides access primitives for
      fixed-length integers of arbitrary size, with specified endianness, and a
      choice of unsigned and two's complement representations.&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Thu, 15 Dec 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 73: Exact Infinities</title><link>https://srfi.schemers.org/srfi-73/</link><guid>https://srfi.schemers.org/srfi-73</guid><description>SRFI 73 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Many Scheme implementations support exact
      arbitrary-precision integer arithmetic as well as exact rational number
      computation. This SRFI extends the rational numbers of R5RS by adding two
      rational infinities (1/0, -1/0).
      &lt;/p>&lt;p>With infinities added to the number system we
      find that division by zero "works". It lets initialization of variables
      precede bounds checks and gives flexibility in placement of those
      checks.&lt;/p>&lt;/blockquote></description><dc:creator>Chongkai Zhu</dc:creator><pubDate>Wed, 30 Nov 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 68: Comprehensive I/O</title><link>https://srfi.schemers.org/srfi-68/</link><guid>https://srfi.schemers.org/srfi-68</guid><description>SRFI 68 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a comprehensive I/O subsystem
      for Scheme with three layers, where each layer is built on top of the one
      below it:
      &lt;ul>
        &lt;li>The lowest, primitive layer provides
        unbuffered I/O, and is close to what a typical operating system
        offers.
        &lt;/li>&lt;li>The middle layer builds on lazy, mostly
        functional buffered streams.
        &lt;/li>&lt;li>The upper layer is similar in nature to the
        ports subsystem in R5RS, and provides conventional, imperative buffered
        input and output.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>The layer architecture is similar to the upper
      three layers of the I/O subsystem in &lt;a href="http://www.standardml.org/Basis/">The Standard ML Basis
      Library&lt;/a>.
      &lt;/p>&lt;p>In particular, the subsystem provides
      &lt;ul>
        &lt;li>buffered reading and writing
        &lt;/li>&lt;li>arbitrary lookahead at the streams
        level
        &lt;/li>&lt;li>dynamic redirection of input or output at
        the ports level
        &lt;/li>&lt;li>binary and text I/O, mixed if needed
        &lt;/li>&lt;li>translated data streams
        &lt;/li>&lt;li>unbuffered I/O at the primitive layer
        &lt;/li>&lt;li>the ability to create arbitrary I/O streams,
        such as to and from blobs and strings
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>The subsystem does &lt;em>not&lt;/em> provide
      &lt;ul>
        &lt;li>formatted I/O
        &lt;/li>&lt;li>non-blocking or selective I/O
        &lt;/li>&lt;li>portable filenames, or any functionality for
        manipulating filenames
        &lt;/li>&lt;li>filesystem operations
        &lt;/li>&lt;li>socket I/O
        &lt;/li>&lt;li>extremely high-throughput or zero-copy
        I/O
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>However, all of these could be added on top of
      one or several of the layers specified in this SRFI.&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Tue, 29 Nov 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 56: Binary I/O</title><link>https://srfi.schemers.org/srfi-56/</link><guid>https://srfi.schemers.org/srfi-56</guid><description>SRFI 56 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI extends Scheme with procedures to
      read and write binary data to and from ports, including utility
      procedures for writing various integer and floating point values in both
      big and little endian formats. Predicates are provided to test if binary
      I/O is allowed on a port, along with new procedures for creating such
      ports.&lt;/p>&lt;/blockquote></description><dc:creator>Alex Shinn</dc:creator><pubDate>Mon, 31 Oct 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 72: Hygienic macros</title><link>https://srfi.schemers.org/srfi-72/</link><guid>https://srfi.schemers.org/srfi-72</guid><description>SRFI 72 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes a procedural macro proposal
      for Scheme with the following features:
      &lt;ul>
        &lt;li>
          &lt;h3>Improved hygiene:&lt;/h3>
          &lt;p>We argue that conventional hygiene
          algorithms may lead to accidental variable capture errors in
          procedural macros. We propose an improved algorithm that avoids these
          problems.
        &lt;li>
          &lt;h3>Reflective tower:&lt;/h3>
          &lt;p>We specify a reflective tower of arbitrary
          height, and propose a refinement of lexical scoping that takes into
          account the phase of use of an identifier in determining its
          meaning.
        &lt;li>
          &lt;h3>Syntax-case:&lt;/h3>
          &lt;p>In the current proposal, the
          &lt;code>syntax-case&lt;/code> form is expressible as a macro in terms of a
          simpler set of primitives and is specified as library syntax.
        &lt;li>
          &lt;h3>Procedural interface:&lt;/h3>
          &lt;p>The primitive interface for manipulating
          compound syntax objects consists of procedures rather than special
          forms. In particular, the traditional abstractions &lt;code>car&lt;/code>,
          &lt;code>cdr&lt;/code>, &lt;code>cons&lt;/code> , &lt;code>...&lt;/code> can be used on syntactic
          data.
        &lt;li>
          &lt;h3>Fast hygiene algorithm:&lt;/h3>
          &lt;p>The reference implementation documents a
          fast imperative hygiene algorithm that is eager and linear in
          expression size.
        &lt;li>
          &lt;h3>Capturing identifiers:&lt;/h3>
          &lt;p>A primitive
          &lt;code>make-capturing-identifier&lt;/code> is provided for intentional
          variable capture and for building expansion-time fluid binding
          constructs.
      &lt;ul>&lt;/ul>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/li>&lt;/ul>&lt;/p>&lt;/blockquote></description><dc:creator>André van Tonder</dc:creator><pubDate>Wed, 21 Sep 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 69: Basic hash tables</title><link>https://srfi.schemers.org/srfi-69/</link><guid>https://srfi.schemers.org/srfi-69</guid><description>SRFI 69 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines basic hash tables. Hash
      tables are widely recognised as a fundamental data structure for a wide
      variety of applications. A hash table is a data structure that:
      &lt;ol>
        &lt;li>provides a mapping from some set of keys to
        some set of values associated to those keys
        &lt;/li>&lt;li>has no intrinsic order for the (key, value)
        associations it contains
        &lt;/li>&lt;li>supports in-place modification as the
        primary means of setting the contents of a hash table
        &lt;/li>&lt;li>provides key lookup and destructive update
        in amortised constant time, provided that a good hash function is
        used.
      &lt;/li>&lt;/ol>&lt;li>
      &lt;p>This SRFI aims to accomplish these
      goals:
      &lt;ol>
        &lt;li>to provide a consistent, generic and widely
        applicable API for hash tables
        &lt;/li>&lt;li>to improve code portability by providing a
        standard hash table facility with guaranteed behaviour
        &lt;/li>&lt;li>to help the programmer by defining utility
        routines that account for the most common situations of using hash
        tables.
      &lt;/li>&lt;/ol>&lt;li>&lt;/li>&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Panu Kalliokoski</dc:creator><pubDate>Wed, 14 Sep 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 67: Compare Procedures</title><link>https://srfi.schemers.org/srfi-67/</link><guid>https://srfi.schemers.org/srfi-67</guid><description>SRFI 67 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI can be seen as an extension of the
      standard procedures &lt;code>=&lt;/code>, &lt;code>&amp;lt;&lt;/code>, &lt;code>char&amp;lt;?&lt;/code> etc. of
      R&lt;sup>5&lt;/sup>RS -- or even as a replacement. The primary design aspect in
      this SRFI is the separation of &lt;em>representing&lt;/em> a total order and
      &lt;em>using it.&lt;/em> For representing the order, we have chosen for truly
      3-way comparisons. For using it we provide an extensive set of
      operations, each of which accepts a procedure used for comparison. Since
      these compare procedures are often optional, comparing built-in types is
      as convenient as R&lt;sup>5&lt;/sup>RS , sometimes more convenient: For
      example, testing if the integer index &lt;em>i&lt;/em> lies in the integer
      range {0, &lt;code>...&lt;/code>, &lt;em>n&lt;/em> &lt;code>-&lt;/code> 1} can be written as
      &lt;code>(&amp;lt;=/&amp;lt;? 0 i n)&lt;/code>, implicitly invoking
      &lt;code>default-compare&lt;/code>.
      &lt;/p>&lt;p>As soon as new total orders are required, the
      infrastructure provided by this SRFI is far more convenient and often
      even more efficient than building each total order from scratch.
      &lt;/p>&lt;p>Moreover, in case Scheme users and implementors
      find this mechanism useful and adopt it, the benefit of having a uniform
      interface to total orders to be used in data structures will manifest
      itself. Most concretely, a new sorting procedure in the spirit of this
      SRFI would have the interface &lt;code>(my-sort [ &lt;i>compare&lt;/i> ]
      &lt;i>xs&lt;/i>)&lt;/code>, using &lt;code>default-compare&lt;/code> if the optional
      &lt;i>compare&lt;/i> was not provided. Then &lt;code>my-sort&lt;/code> could be defined
      using the entire infrastructure of this SRFI: Efficient 2- and 3-way
      branching, testing for chains and pairwise inequality, min/max, and
      general order statistics.&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner and Jens Axel Søgaard</dc:creator><pubDate>Sun, 11 Sep 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 70: Numbers</title><link>https://srfi.schemers.org/srfi-70/</link><guid>https://srfi.schemers.org/srfi-70</guid><description>SRFI 70 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes text to replace section 6.2
      "Numbers" of R5RS in order to extend its capabilities, correct errors in
      its specification, make it more explicit about limitations of precision
      and magnitude, and improve portability between implementations. More
      specifically, this new text:
      &lt;ul>
        &lt;li>incorporates an inexact real positive
        infinity and an inexact real negative infinity,
        &lt;/li>&lt;li>extends number syntax to incorporate inexact
        real infinities,
        &lt;/li>&lt;li>adapts Common-Lisp semantics for
        &lt;samp>`expt'&lt;/samp> and extends them to include inexact real
        infinities,
        &lt;/li>&lt;li>corrects the description of
        &lt;samp>`sqrt'&lt;/samp>,
        &lt;/li>&lt;li>sharpens the distinction between exact and
        inexact numbers,
        &lt;/li>&lt;li>removes a contradiction related to
        exactness,
        &lt;/li>&lt;li>extends &lt;samp>`gcd'&lt;/samp> and
        &lt;samp>`lcm'&lt;/samp> to exact rational numbers,
        &lt;/li>&lt;li>extends &lt;samp>`quotient'&lt;/samp>,
        &lt;samp>`modulo'&lt;/samp>, and &lt;samp>`remainder'&lt;/samp> to finite real
        numbers,
        &lt;/li>&lt;li>clarifies the behavior of
        &lt;samp>`inexact->exact'&lt;/samp> applied to an exact argument,
        &lt;/li>&lt;li>clarifies the behavior of
        &lt;samp>`exact->inexact'&lt;/samp> applied to an inexact argument,
        &lt;/li>&lt;li>adds convenience procedures
        &lt;samp>`exact-round'&lt;/samp>, &lt;samp>`exact-ceiling'&lt;/samp>,
        &lt;samp>`exact-floor'&lt;/samp>, and &lt;samp>`exact-truncate'&lt;/samp>,
        &lt;/li>&lt;li>and adds examples.
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Sun, 11 Sep 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 71: Extended LET-syntax for multiple values</title><link>https://srfi.schemers.org/srfi-71/</link><guid>https://srfi.schemers.org/srfi-71</guid><description>SRFI 71 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI is a proposal for extending
      &lt;code>let&lt;/code>, &lt;code>let*&lt;/code>, and &lt;code>letrec&lt;/code> for
      receiving multiple values. The syntactic extension is fully compatible
      with the existing syntax. It is the intention that single-value bindings,
      i.e. &lt;code>(let ((var expr)) ...)&lt;/code>, and multiple-value binding can
      be mixed freely and conveniently.
      &lt;/p>&lt;p>The most simple form of the new syntax is best
      explained by an example:
      &lt;pre>
(define (quo-rem x y)
  (values (quotient x y) (remainder x y)))

(define (quo x y)
  (let ((q r (quo-rem x y)))
    q))
&lt;/pre>
      &lt;/p>&lt;p>The procedure &lt;code>quo-rem&lt;/code> delivers two
      values to its continuation. These values are received as &lt;code>q&lt;/code>
      and &lt;code>r&lt;/code> in the &lt;code>let&lt;/code>-expression of the procedure
      &lt;code>quo&lt;/code>. In other words, the syntax of &lt;code>let&lt;/code> is
      extended such that several variables can be specified---and these
      variables receive the values delivered by the expression &lt;code>(quo-rem x
      y)&lt;/code>.
      &lt;/p>&lt;p>The syntax of &lt;code>let&lt;/code> is further
      extended to cases in which a rest argument receives the list of all
      residual values. Again by example,
      &lt;pre>
(let (((values y1 y2 . y3+) (foo x)))
   body)
&lt;/pre>In this example, &lt;code>values&lt;/code> is a
syntactic keyword indicating the presence of multiple values to be received,
and &lt;code>y1&lt;/code>, &lt;code>y2&lt;/code>, and &lt;code>y3+&lt;/code>, resp., are
variables bound to the first value, the second value, and the list of the
remaining values, resp., as produced by &lt;code>(foo x)&lt;/code>. The syntactic
keyword &lt;code>values&lt;/code> allows receiving all values as in &lt;code>(let
(((values . xs) (foo x))) body)&lt;/code>. It also allows receiving no values at
all as in &lt;code>(let (((values) (for-each foo list))) body)&lt;/code>.&lt;br>
      &lt;br>
      &lt;/p>&lt;p>A common application of binding multiple values
      is decomposing data structures into their components. This mechanism is
      illustrated in its most primitive form as follows: The procedure
      &lt;code>uncons&lt;/code> (defined below) decomposes a pair &lt;code>x&lt;/code> into
      its car and its cdr and delivers them as two values to its continuation.
      Then an extended &lt;code>let&lt;/code> can receive these values:
      &lt;pre>
(let ((car-x cdr-x (uncons x)))
  (foo car-x cdr-x))
&lt;/pre>
      &lt;/p>&lt;p>Of course, for pairs this method is probably
      neither faster nor clearer than using the procedures &lt;code>car&lt;/code> and
      &lt;code>cdr&lt;/code>. However, for data structures doing substantial work
      upon decomposition this is different: Extracting the element of highest
      priority from a priority queue, while at the same time constructing the
      residual queue, can both be more efficient and more convenient than doing
      both operations independently. In fact, the &lt;code>quo-rem&lt;/code> example
      illustrates this point already as both quotient and remainder are
      probably computed by a common exact division algorithm. (And often
      caching is used to avoid executing this algorithm twice as often as
      needed.)
      &lt;/p>&lt;p>As the last feature of this SRFI, a mechanism
      is specified to store multiple values in heap-allocated data structures.
      For this purpose, &lt;code>values->list&lt;/code> and
      &lt;code>values->vector&lt;/code> construct a list (a vector, resp.) storing
      all values delivered by evaluating their argument expression. Note that
      these operations cannot be procedures.&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner</dc:creator><pubDate>Fri, 12 Aug 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 49: Indentation-sensitive syntax</title><link>https://srfi.schemers.org/srfi-49/</link><guid>https://srfi.schemers.org/srfi-49</guid><description>SRFI 49 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI descibes a new syntax for Scheme,
      called I-expressions, whith equal descriptive power as S-expressions. The
      syntax uses indentation to group expressions, and has no special cases
      for semantic constructs of the language. It can be used both for program
      and data input.
      &lt;/p>&lt;p>It also allows mixing S-expressions and
      I-expressions freely, giving the programmer the ability to layout the
      code as to maximize readability.&lt;/p>&lt;/blockquote></description><dc:creator>Egil Möller</dc:creator><pubDate>Fri, 22 Jul 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 61: A more general cond clause</title><link>https://srfi.schemers.org/srfi-61/</link><guid>https://srfi.schemers.org/srfi-61</guid><description>SRFI 61 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes an extension to the
      &lt;code>cond&lt;/code> syntax to allow a more general clause, one that allows
      binding the results of tests as in the &lt;code>=>&lt;/code> clauses and
      user-defined meaning of the success &amp;amp; failure of tests.&lt;/p>&lt;/blockquote></description><dc:creator>Taylor Campbell</dc:creator><pubDate>Thu, 21 Jul 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 62: S-expression comments</title><link>https://srfi.schemers.org/srfi-62/</link><guid>https://srfi.schemers.org/srfi-62</guid><description>SRFI 62 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a simple extension to
      Scheme's lexical syntax that allows individual S-expressions to be made
      into comments, ignored by the reader. This contrasts with the standard
      Lisp semicolon comments, which make the reader ignore the remainder of
      the line, and the slightly less common block comments, as &lt;a href="https://srfi.schemers.org/srfi-30/srfi-30.html">SRFI
      30&lt;/a> defines: both of these mechanisms comment out slices of text, not
      S-expressions.&lt;/p>&lt;/blockquote></description><dc:creator>Taylor Campbell</dc:creator><pubDate>Thu, 21 Jul 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 65: define-immutable: A Syntax to Define Identifiers With Immutable Values</title><link>https://srfi.schemers.org/srfi-65/</link><guid>https://srfi.schemers.org/srfi-65</guid><description>SRFI 65 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>The &lt;code>define-immutable&lt;/code> form defines an
      identifier whose value never changes.
      &lt;/p>&lt;p>The expression part of the definition is
      evaluated lazily: it is not evaluated unless and until the identifier is
      evaluated. This permits an immutable definition to use other definitions
      in more ways than is possible when using &lt;code>define&lt;/code> in internal
      definitions.
      &lt;/p>&lt;p>A series of immutable definitions have simple
      semantics, making them easy to program and understand.
      &lt;pre>
    (let ()
      (define-immutable x (+ z 5))
      (define-immutable y (/ 100 4))
      (define-immutable z (add-10 y))
      (define-immutable add-10 (add-n 10))
      (define-immutable (add-n n)
        (lambda (x)
          (+ n x)))
      x)
  =>
    40
&lt;/pre>&lt;/p>&lt;/blockquote></description><dc:creator>Andrew Wilcox</dc:creator><pubDate>Tue, 17 May 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 63: Homogeneous and Heterogeneous Arrays</title><link>https://srfi.schemers.org/srfi-63/</link><guid>https://srfi.schemers.org/srfi-63</guid><description>SRFI 63 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The SRFI, which is to supersede &lt;a href="https://srfi.schemers.org/srfi-47/">SRFI-47&lt;/a>, "Array",
      &lt;ul>
        &lt;li>synthesizes array concepts from Common-Lisp
        and Alan Bawden's "array.scm";
        &lt;/li>&lt;li>incorporates all the uniform vector types
        from &lt;a href="https://srfi.schemers.org/srfi-4/">SFRI-4&lt;/a> "Homogeneous numeric vector
        datatypes";
        &lt;/li>&lt;li>adds a boolean uniform array type;
        &lt;/li>&lt;li>adds 16.bit and 128.bit floating-point
        uniform-array types;
        &lt;/li>&lt;li>adds decimal floating-point uniform-array
        types; and
        &lt;/li>&lt;li>adds array types of (dual) floating-point
        complex numbers.
      &lt;/li>&lt;/ul>&lt;li>Multi-dimensional arrays subsume homogeneous
      vectors as the one-dimensional case, obviating the need for SRFI-4.&lt;br>
      &lt;br>
      &lt;p>SRFI-58 gives a read/write invariant syntax for
      the homogeneous and heterogeneous arrays described here.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Wed, 27 Apr 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 58: Array Notation</title><link>https://srfi.schemers.org/srfi-58/</link><guid>https://srfi.schemers.org/srfi-58</guid><description>SRFI 58 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;a href="https://srfi.schemers.org/srfi-47/">SRFI-47&lt;/a> and its
      successor &lt;a href="https://srfi.schemers.org/srfi-63/">SRFI-63&lt;/a> provide both homogeneous numeric
      and heterogeneous multidimensional arrays which subsume Scheme vectors.
      The notation presented here builds upon Common-Lisp array syntax to
      represent heterogeneous arrays; and introduces a new Scheme-based
      notation for denoting homogeneous numeric arrays.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Tue, 08 Mar 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 59: Vicinity</title><link>https://srfi.schemers.org/srfi-59/</link><guid>https://srfi.schemers.org/srfi-59</guid><description>SRFI 59 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A vicinity is a descriptor for a place in the
      file system. Vicinities hide from the programmer the concepts of host,
      volume, directory, and version. Vicinities express only the concept of a
      file environment where a file name can be resolved to a file in a system
      independent manner.
      &lt;/p>&lt;p>All of these procedures are file-system
      dependent. Use of these vicinity procedures can make programs file-system
      &lt;em>in&lt;/em>dependent.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Tue, 08 Mar 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 60: Integers as Bits</title><link>https://srfi.schemers.org/srfi-60/</link><guid>https://srfi.schemers.org/srfi-60</guid><description>SRFI 60 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Treating integers as two's-complement strings
      of bits is an arcane but important domain of computer science. It is used
      for:
      &lt;ul>
        &lt;li>hashing;
        &lt;/li>&lt;li>Galois-field[2] calculations of
        error-detecting and error-correcting codes;
        &lt;/li>&lt;li>cryptography and ciphers;
        &lt;/li>&lt;li>pseudo-random number generation;
        &lt;/li>&lt;li>register-transfer-level modeling of digital
        logic designs;
        &lt;/li>&lt;li>Fast-Fourier transforms;
        &lt;/li>&lt;li>packing and unpacking numbers in persistant
        data structures;
        &lt;/li>&lt;li>space-filling curves with applications to
        dimension reduction and sparse multi-dimensional database indexes;
        and
        &lt;/li>&lt;li>generating approximate seed values for
        root-finders and transcendental function algorithms.
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Tue, 08 Mar 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 57: Records</title><link>https://srfi.schemers.org/srfi-57/</link><guid>https://srfi.schemers.org/srfi-57</guid><description>SRFI 57 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>We describe a syntax for defining record types.
      A predicate, constructor, and field accessors and modifiers may be
      specified for each record type. We also introduce a syntax for declaring
      record type schemes, representing families of record types that share a
      set of field labels. A polymorphic predicate and polymorphic field
      accessors and modifiers may be specified for each record type scheme. A
      syntax is provided for constructing records by field label, for in-place
      and for functional record update, and for composing records.&lt;/p>&lt;/blockquote></description><dc:creator>André van Tonder</dc:creator><pubDate>Mon, 07 Mar 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 46: Basic Syntax-rules Extensions</title><link>https://srfi.schemers.org/srfi-46/</link><guid>https://srfi.schemers.org/srfi-46</guid><description>SRFI 46 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes two extensions to the
      R5RS&lt;sup>1&lt;/sup> &lt;code>syntax-rules&lt;/code> pattern language: the first
      allows &lt;code>syntax-rules&lt;/code> macros to generate macros, where the
      macro-generated macros use ellipsis that is not used by the
      macro-generating macros; the second allows for 'tail patterns.'&lt;/p>&lt;/blockquote></description><dc:creator>Taylor Campbell</dc:creator><pubDate>Mon, 28 Feb 2005 12:00:00 -0800</pubDate></item><item><title>SRFI 55: require-extension</title><link>https://srfi.schemers.org/srfi-55/</link><guid>https://srfi.schemers.org/srfi-55</guid><description>SRFI 55 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies an extremely simple
      facility for making an extension or library available to a Scheme
      toplevel environment.&lt;/p>&lt;/blockquote></description><dc:creator>Felix L. Winkelmann and D.C. Frost</dc:creator><pubDate>Fri, 05 Nov 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 43: Vector library</title><link>https://srfi.schemers.org/srfi-43/</link><guid>https://srfi.schemers.org/srfi-43</guid><description>SRFI 43 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a comprehensive and complete
      library of vector operations accompanied by a freely available and
      complete reference implementation. The reference implementation is
      unencumbered by copyright, and useable with no modifications on any
      Scheme system that is R5RS-compliant. It also provides several hooks for
      implementation-specific optimization as well.
      &lt;/p>&lt;p>Because this SRFI is more of a library or
      module specification than a request for additions to readers or any other
      internal implementation detail, in an implementation that supports a
      module or structure or package or library or unit (et cetera) systems,
      these procedures should be contained in a module / structure / package /
      library / unit called &lt;code>vector-lib&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Taylor Campbell</dc:creator><pubDate>Tue, 26 Oct 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 53: Syntactic computations with computation-rules</title><link>https://srfi.schemers.org/srfi-53/</link><guid>https://srfi.schemers.org/srfi-53</guid><description>SRFI 53 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI provides a portable framework for
      writing complex high-level macros that perform nontrivial computations
      during expansion.&lt;/p>&lt;/blockquote></description><dc:creator>André van Tonder</dc:creator><pubDate>Mon, 06 Sep 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 54: Formatting</title><link>https://srfi.schemers.org/srfi-54/</link><guid>https://srfi.schemers.org/srfi-54</guid><description>SRFI 54 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI introduces the CAT procedure that
      converts any object to a string. It takes one object as the first
      argument and accepts a variable number of optional arguments, unlike the
      procedure called FORMAT.&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Thu, 24 Jun 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 52: Permitting and Supporting Extended Character Sets</title><link>https://srfi.schemers.org/srfi-52/</link><guid>https://srfi.schemers.org/srfi-52</guid><description>SRFI 52 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes how to modify the
      &lt;i>Revised Report&lt;/i> (&lt;a href="http://www.schemers.org/Documents/Standards/R5RS/">R5RS&lt;/a>) in order to
      enable conforming implementations to use an extended character set such
      as (but not limited to) &lt;a href="http://www.unicode.org">Unicode&lt;/a>.
      &lt;/p>&lt;p>Changes to some requirements of the report are
      recommended. Currently, the &lt;i>Revised Report&lt;/i> contains requirements
      which are difficult or impossible to satisfy with some extended character
      sets.
      &lt;/p>&lt;p>New required procedures are proposed,
      specified, and included in the reference implementation. These procedures
      enable portable Scheme programs to manipulate Scheme source texts and
      source data accurately, even in implementations using extended character
      sets.
      &lt;/p>&lt;p>This SRFI concludes with some suggestions for
      implementors interested in providing good Unicode support, using these
      suggestions to illustrate how the proposed changes to the &lt;i>Revised
      Report&lt;/i> can "play out" in Unicode-based Scheme.
      &lt;/p>&lt;p>This SRFI does &lt;b>not&lt;/b> attempt to provide a
      comprehensive library for global text processing. For example, one issue
      in global text processing is the need for linguistically-sensitive,
      locale-sensitive procedures for sorting strings. Such procedures are
      beyond the scope of this SRFI. On the other hand, by making Scheme
      compatible with extended character sets, this SRFI is a step in the
      direction of permitting global text processing standard libraries to be
      developed in a form portable across all conforming
      implementations.
      &lt;/p>&lt;p>This SRFI does &lt;b>not&lt;/b> propose that
      implementations be required to support Unicode or any other extended
      character set. It does not specify a representation for Unicode
      characters or strings. It &lt;b>does&lt;/b> revise the specifications of the
      report so that &lt;code>char?&lt;/code> values &lt;i>may be&lt;/i> Unicode (or other)
      characters.
      &lt;/p>&lt;p>The reference implementation included should
      prove to be easily ported to and effective for all ASCII-only
      implementations and for many implementations using an 8-bit character set
      which is an extension of ASCII (it will require very minor modifications
      for each particular implementation). Other implementations may need to
      use a different implementation.&lt;/p>&lt;/blockquote></description><dc:creator>Thomas Lord</dc:creator><pubDate>Thu, 17 Jun 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 47: Array</title><link>https://srfi.schemers.org/srfi-47/</link><guid>https://srfi.schemers.org/srfi-47</guid><description>SRFI 47 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>"slib/array.scm" synthesizes array ideas from
	Common-Lisp and Alan Bawden with homogeneous vector ideas from &lt;a href="https://srfi.schemers.org/srfi-4/">SRFI-4&lt;/a>
	and &lt;a href="http://swissnet.ai.mit.edu/~jaffer/SCM">SCM&lt;/a>. The result portably
      integrates homogeneous and heterogeneous arrays into Scheme.&lt;/p>&lt;/blockquote></description><dc:creator>Aubrey Jaffer</dc:creator><pubDate>Mon, 14 Jun 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 51: Handling rest list</title><link>https://srfi.schemers.org/srfi-51/</link><guid>https://srfi.schemers.org/srfi-51</guid><description>SRFI 51 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI introduces the
      &lt;code>rest-values&lt;/code> procedure which has three modes of
      operation:
      &lt;ol>
        &lt;li>it processes a rest list after checking its
        elements with default values or predicate procedures,
        &lt;/li>&lt;li>it processes a rest list with default values
        without checking its elements,
        &lt;/li>&lt;li>it processes a default list whose elements
        are lists or pairs, after checking their elements that are default
        values or predicate procedures with the elements of a rest list,
      &lt;/li>&lt;/ol>&lt;li>
      &lt;p>and eight macros which additionally check the
      rest arguments that are returned by &lt;code>rest-values&lt;/code>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Joo ChurlSoo</dc:creator><pubDate>Mon, 07 Jun 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 45: Primitives for Expressing Iterative Lazy Algorithms</title><link>https://srfi.schemers.org/srfi-45/</link><guid>https://srfi.schemers.org/srfi-45</guid><description>SRFI 45 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Lazy evaluation is traditionally simulated in
      Scheme using &lt;code>delay&lt;/code> and &lt;code>force&lt;/code>. However, these
      primitives are not powerful enough to express a large class of lazy
      algorithms that are iterative. Indeed, it is folklore in the Scheme
      community that typical iterative lazy algorithms written using
      &lt;code>delay&lt;/code> and &lt;code>force&lt;/code> will often require unbounded
      memory.
      &lt;/p>&lt;p>Although varous modifications of
      &lt;code>delay&lt;/code> and &lt;code>force&lt;/code> had been proposed to resolve
      this problem (see e.g., the SRFI-40 discussion list) they all fail some
      of the benchmarks provided below. To our knowledge, the current SRFI
      provides the first exhaustive solution to this problem.
      &lt;/p>&lt;p>As motivation, we first explain how the usual
      laziness encoding using only &lt;code>delay&lt;/code> and &lt;code>force&lt;/code>
      will break the iterative behavior of typical algorithms that would have
      been properly tail-recursive in a true lazy language, causing the
      computation to require unbounded memory.
      &lt;/p>&lt;p>The problem is then resolved by introducing a
      set of three operations:
      &lt;pre>
    {&lt;code>lazy&lt;/code>, &lt;code>delay&lt;/code>, &lt;code>force&lt;/code>}
&lt;/pre>which allow the programmer to succinctly
express lazy algorithms while retaining bounded space behavior in cases that
are properly tail-recursive. A general recipe for using these primitives is
provided. An additional procedure &lt;code>{eager}&lt;/code> is provided for the
construction of eager promises in cases where efficiency is a concern.&lt;br>

      &lt;br>
      &lt;/p>&lt;p>Although this SRFI redefines &lt;code>delay&lt;/code>
      and &lt;code>force&lt;/code>, the extension is conservative in the sense that
      the semantics of the subset {&lt;code>delay&lt;/code>, &lt;code>force&lt;/code>} in
      isolation (i.e., as long as the program does not use &lt;code>lazy&lt;/code>)
      agrees with that in R5RS. In other words, no program that uses the R5RS
      definitions of delay and force will break if those definition are
      replaced by the SRFI-45 definitions of delay and force.&lt;/p>&lt;/blockquote></description><dc:creator>André van Tonder</dc:creator><pubDate>Mon, 05 Apr 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 44: Collections</title><link>https://srfi.schemers.org/srfi-44/</link><guid>https://srfi.schemers.org/srfi-44</guid><description>SRFI 44 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A Collections API which defines a common naming
      scheme and set of operations for creating, accessing, and manipulating
      common datastructures in Scheme. The API defines accessors, a common
      protocol for value access via generic and specific enumeration, and
      functions for inter-datastructure cooperation. Finally, a concrete
      specification of a compliant set of operators for the standard Scheme
      heterogenous datastructures (lists and vectors) and for the homogeneous
      Scheme string is provided.&lt;/p>&lt;/blockquote></description><dc:creator>Scott G. Miller</dc:creator><pubDate>Sun, 07 Mar 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 48: Intermediate Format Strings</title><link>https://srfi.schemers.org/srfi-48/</link><guid>https://srfi.schemers.org/srfi-48</guid><description>SRFI 48 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies Format Strings, a
      method of interpreting a Scheme string which contains a number of format
      directives that are replaced with other string data according to the
      semantics of each directive. This SRFI extends &lt;a href="https://srfi.schemers.org/srfi-28">SRFI-28&lt;/a> in being more generally useful but is less general
      than advanced format strings in that it does not allow, aside from ~F,
      for controlled positioning of text within fields.&lt;/p>&lt;/blockquote></description><dc:creator>Ken Dickey</dc:creator><pubDate>Tue, 02 Mar 2004 12:00:00 -0800</pubDate></item><item><title>SRFI 32: Sort Libraries</title><link>https://srfi.schemers.org/srfi-32/</link><guid>https://srfi.schemers.org/srfi-32</guid><description>SRFI 32 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>Current Scheme sorting packages are, every one
      of them, surprisingly bad. I've designed the API for a full-featured sort
      toolkit, which I propose as an SRFI. The spec comes with 1200 lines of
      high-quality reference code: tightly written, highly commented, portable
      code, available for free. Implementors want this code. It's better than
      what you have.&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Thu, 17 Jul 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 33: Integer Bitwise-operation Library</title><link>https://srfi.schemers.org/srfi-33/</link><guid>https://srfi.schemers.org/srfi-33</guid><description>SRFI 33 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>R5RS Scheme has no utilities for performing
      bitwise logical operations on integers or bitstrings, which is a problem
      for authors of portable code. This SRFI proposes a coherent and
      comprehensive set of these functions; it is accompanied by a reference
      implementation of the spec in terms of a set of seven core operators. The
      reference implementation is
      &lt;ul>
        &lt;li>portable
        &lt;/li>&lt;li>efficient
        &lt;/li>&lt;li>completely open, public-domain source
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>The precise semantics of these operators is
      almost never an issue. A consistent, portable set of &lt;b>names&lt;/b> and
      &lt;b>parameter conventions&lt;/b>, however, is. Hence this SRFI.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Thu, 17 Jul 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 42: Eager Comprehensions</title><link>https://srfi.schemers.org/srfi-42/</link><guid>https://srfi.schemers.org/srfi-42</guid><description>SRFI 42 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines a modular and portable
      mechanism for eager comprehensions extending the algorithmic language
      Scheme [R5RS]. An eager comprehension is a convenient notation for one or
      more nested or parallel loops generating a sequence of values, and
      accumulating this sequence into a result.&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner</dc:creator><pubDate>Mon, 07 Jul 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 39: Parameter objects</title><link>https://srfi.schemers.org/srfi-39/</link><guid>https://srfi.schemers.org/srfi-39</guid><description>SRFI 39 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines &lt;i>parameter&lt;/i> objects, the
      procedure &lt;code>make-parameter&lt;/code> to create parameter objects and the
      &lt;code>parameterize&lt;/code> special form to dynamically bind parameter
      objects. In the dynamic environment, each parameter object is bound to a
      cell containing the value of the parameter. When a procedure is called
      the called procedure inherits the dynamic environment from the caller.
      The &lt;code>parameterize&lt;/code> special form allows the binding of a
      parameter object to be changed for the dynamic extent of its body.&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Mon, 30 Jun 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 38: External Representation for Data With Shared Structure</title><link>https://srfi.schemers.org/srfi-38/</link><guid>https://srfi.schemers.org/srfi-38</guid><description>SRFI 38 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes
      &lt;code>(write-with-shared-structure)&lt;/code> and
      &lt;code>(read-with-shared-structure)&lt;/code>, procedures for writing and reading
      external representations of data containing shared structure. These
      procedures implement a proposed standard external notation for data
      containing shared structure.
      &lt;/p>&lt;p>This SRFI permits but does not require
      replacing the standard &lt;code>(write)&lt;/code> and &lt;code>(read)&lt;/code> functions.
      These functions may be implemented without the overhead in time and space
      required to detect and specify shared structure.
      &lt;/p>&lt;p>An implementation conforms to this SRFI if it
      provides procedures named &lt;code>(write-with-shared-structure)&lt;/code> and
      &lt;code>(read-with-shared-structure)&lt;/code>, which produce and read the same
      notation as produced by the reference implementation. It may also provide
      &lt;code>(read/ss)&lt;/code> and &lt;code>(write/ss)&lt;/code>, equivalent functions with
      shorter names.&lt;/p>&lt;/blockquote></description><dc:creator>Ray Dillinger</dc:creator><pubDate>Wed, 02 Apr 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 37: args-fold: a program argument processor</title><link>https://srfi.schemers.org/srfi-37/</link><guid>https://srfi.schemers.org/srfi-37</guid><description>SRFI 37 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Many operating systems make the set of argument
      strings used to invoke a program available (often following the program
      name string in an array called argv). Most programs need to parse and
      process these argument strings in one way or another. This SRFI describes
      a set of procedures that support processing program arguments according
      to POSIX and GNU C Library Reference Manual guidelines.&lt;/p>&lt;/blockquote></description><dc:creator>Anthony Carrico</dc:creator><pubDate>Mon, 13 Jan 2003 12:00:00 -0800</pubDate></item><item><title>SRFI 31: A special form `rec' for recursive evaluation</title><link>https://srfi.schemers.org/srfi-31/</link><guid>https://srfi.schemers.org/srfi-31</guid><description>SRFI 31 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>We propose the implementation of a special form
      called &lt;code>rec&lt;/code>. This form is a generalization and combination of
      the forms &lt;code>rec&lt;/code> and &lt;code>named-lambda&lt;/code> of
      [Clinger1985]. It allows the simple and non-imperative construction of
      self-referential expressions. As an important special case, it extends
      the A. Church form &lt;code>lambda&lt;/code> such that it allows the direct
      definition of recursive procedures without using further special forms
      like &lt;code>let&lt;/code> or &lt;code>letrec&lt;/code>, without using advanced
      constructions like the H. B. Curry combinator and, unlike
      &lt;code>define&lt;/code>, without introducing variable bindings into the
      external environment.&lt;/p>&lt;/blockquote></description><dc:creator>Mirko Luedde</dc:creator><pubDate>Mon, 02 Dec 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 34: Exception Handling for Programs</title><link>https://srfi.schemers.org/srfi-34/</link><guid>https://srfi.schemers.org/srfi-34</guid><description>SRFI 34 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines exception-handling and
      exception-raising constructs for Scheme, including
      &lt;ul>
        &lt;li>a &lt;code>with-exception-handler&lt;/code>
        procedure and a &lt;code>guard&lt;/code> form for installing
        exception-handling procedures,
        &lt;/li>&lt;li>a &lt;code>raise&lt;/code> procedure for invoking
        the current exception handler.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>This SRFI is based on (withdrawn) &lt;a href="https://srfi.schemers.org/srfi-12/">SRFI 12: Exception Handling&lt;/a> by William Clinger, R. Kent
      Dybvig, Matthew Flatt, and Marc Feeley.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Richard Kelsey and Michael Sperber</dc:creator><pubDate>Sun, 01 Dec 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 35: Conditions</title><link>https://srfi.schemers.org/srfi-35/</link><guid>https://srfi.schemers.org/srfi-35</guid><description>SRFI 35 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The SRFI defines constructs for creating and
      inspecting &lt;i>condition&lt;/i> types and values. A condition value
      encapsulates information about an exceptional situation, or exception.
      This SRFI also defines a few basic condition types.&lt;/p>&lt;/blockquote></description><dc:creator>Richard Kelsey and Michael Sperber</dc:creator><pubDate>Sun, 01 Dec 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 36: I/O Conditions</title><link>https://srfi.schemers.org/srfi-36/</link><guid>https://srfi.schemers.org/srfi-36</guid><description>SRFI 36 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI specifies a set of condition types
      for I/O errors. The condition types are defined in terms of &lt;a href="https://srfi.schemers.org/srfi-35/">SRFI 35&lt;/a>. Moreover, this SRFI requires a Scheme system
      implementing it to raise exceptions in the sense of &lt;a href="http://srfi.schemers.org/srfi-34/">SRFI 34&lt;/a> for errors occurring
      during the execution of the R5RS &lt;a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.6">
      I/O operations&lt;/a>.&lt;/p>&lt;/blockquote></description><dc:creator>Michael Sperber</dc:creator><pubDate>Sun, 01 Dec 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 30: Nested Multi-line Comments</title><link>https://srfi.schemers.org/srfi-30/</link><guid>https://srfi.schemers.org/srfi-30</guid><description>SRFI 30 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI extends R5RS by possibly nested,
      multi-line comments. Multi-line comments start with &lt;code>#|&lt;/code> and
      end with &lt;code>|#&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Martin Gasbichler</dc:creator><pubDate>Wed, 07 Aug 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 29: Localization</title><link>https://srfi.schemers.org/srfi-29/</link><guid>https://srfi.schemers.org/srfi-29</guid><description>SRFI 29 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies an interface to
      retrieving and displaying locale sensitive messages. A Scheme program can
      register one or more translations of templated messages, and then write
      Scheme code that can transparently retrieve the appropriate message for
      the locale under which the Scheme system is running.&lt;/p>&lt;/blockquote></description><dc:creator>Scott G. Miller</dc:creator><pubDate>Thu, 01 Aug 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 28: Basic Format Strings</title><link>https://srfi.schemers.org/srfi-28/</link><guid>https://srfi.schemers.org/srfi-28</guid><description>SRFI 28 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies Format Strings, a
      method of interpreting a Scheme string which contains a number of escape
      sequences that are replaced with other string data according to the
      semantics of each sequence.&lt;/p>&lt;/blockquote></description><dc:creator>Scott G. Miller</dc:creator><pubDate>Tue, 25 Jun 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 27: Sources of Random Bits</title><link>https://srfi.schemers.org/srfi-27/</link><guid>https://srfi.schemers.org/srfi-27</guid><description>SRFI 27 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies an interface to sources
      of random bits, or "random sources" for brevity. In particular, there are
      three different ways to use the interface, with varying demands on the
      quality of the source and the amount of control over the production
      process:
      &lt;ul>
        &lt;li>The "no fuss" interface specifies that
        &lt;code>(random-integer&lt;/code> &lt;i>n&lt;/i>&lt;code>)&lt;/code> produces the next
        random integer in {0, ..., &lt;i>n&lt;/i>-1} and &lt;code>(random-real)&lt;/code>
        produces the next random real number between zero and one. The details
        of how these random values are produced may not be very relevant, as
        long as they appear to be sufficiently random.
        &lt;/li>&lt;li>For simulation purposes, on the contrary, it
        is usually necessary to know that the numbers are produced
        deterministically by a pseudo random number generator of high quality
        and to have explicit access to its state. In addition, one might want
        to use several independent sources of random numbers at the same time
        and it can be useful to have some simple form of randomization.
        &lt;/li>&lt;li>For security applications a serious form of
        true randomization is essential, in the sense that it is difficult for
        an adversary to exploit or introduce imperfections into the
        distribution of random bits. Moreover, the linear complexity of the
        stream of random bits is more important than its statistical
        properties. In these applications, an entropy source (producing truely
        random bits at a low rate) is used to randomize a pseudo random number
        generator to increase the rate of available bits.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>Once random sources provide the infrastructure
      to obtain random bits, these can be used to construct other random
      deviates. Most important are floating point numbers of various
      distributions and random discrete structures, such as permutations or
      graphs. As there is an essentially unlimited number of such objects (with
      limited use elsewhere), we do not include them in this SRFI. In other
      words, this SRFI is &lt;em>not&lt;/em> about making all sorts of random
      objects---it is about obtaining random bits in a portable, flexible,
      reliable, and efficient way.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner</dc:creator><pubDate>Mon, 03 Jun 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 25: Multi-dimensional Array Primitives</title><link>https://srfi.schemers.org/srfi-25/</link><guid>https://srfi.schemers.org/srfi-25</guid><description>SRFI 25 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A core set of procedures for creating and
      manipulating heterogeneous multidimensional arrays is proposed. The
      design is consistent with the rest of Scheme and independent of other
      container data types. It provides easy sharing of parts of an array as
      other arrays without copying, encouraging a declarative style of
      programming.
      &lt;/p>&lt;p>The specification is based on an original
      contribution by Alan Bawden in 1993.&lt;/p>&lt;/blockquote></description><dc:creator>Jussi Piitulainen</dc:creator><pubDate>Tue, 21 May 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 24: Define-syntax in local lexical scopes</title><link>https://srfi.schemers.org/srfi-24/</link><guid>https://srfi.schemers.org/srfi-24</guid><description>SRFI 24 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This document specifies a proper extension to
      Scheme which allows &lt;b>define-syntax&lt;/b> forms to appear in those places
      where local definitions can appear (R5RS, 5.2.2). A corresponding
      letrec-variant is described.&lt;/p>&lt;/blockquote></description><dc:creator>Antti Huima</dc:creator><pubDate>Fri, 12 Apr 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 26: Notation for Specializing Parameters without Currying</title><link>https://srfi.schemers.org/srfi-26/</link><guid>https://srfi.schemers.org/srfi-26</guid><description>SRFI 26 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>When programming in functional style, it is
      frequently necessary to specialize some of the parameters of a
      multi-parameter procedure. For example, from the binary operation
      &lt;code>cons&lt;/code> one might want to obtain the unary operation
      &lt;code>(lambda (x) (cons 1 x))&lt;/code>. This specialization of parameters
      is also known as "partial application", "operator section" or
      "projection".
      &lt;/p>&lt;p>The mechanism proposed here allows to write
      this sort of specialization in a simple and compact way. The mechanism is
      best explained by a few examples:
      &lt;table>
        &lt;tr>
          &lt;td>&lt;code>(cut cons (+ a 1) &amp;lt;>)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(lambda (x2) (cons (+ a 1) x2))&lt;/code>
        &lt;tr>
          &lt;td>&lt;code>(cut list 1 &amp;lt;> 3 &amp;lt;> 5)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(lambda (x2 x4) (list 1 x2 3 x4 5))&lt;/code>
        &lt;tr>
          &lt;td>&lt;code>(cut list)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(lambda () (list))&lt;/code>
        &lt;tr>
          &lt;td>&lt;code>(cut list 1 &amp;lt;> 3 &amp;lt;...>)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(lambda (x2 . xs) (apply list 1 x2 3 xs))&lt;/code>
        &lt;tr>
          &lt;td>&lt;code>(cut &amp;lt;> a b)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(lambda (f) (f a b))&lt;/code>
      &lt;/td>&lt;/tr>&lt;/td>&lt;/tr>&lt;/td>&lt;/tr>&lt;/td>&lt;/tr>&lt;/td>&lt;/tr>&lt;/table>
      &lt;/p>&lt;p>As you see, the macro &lt;code>cut&lt;/code>
      specializes some of the parameters of its first argument. The parameters
      that are to show up as formal variables of the result are indicated by
      the symbol &lt;code>&amp;lt;>&lt;/code>, pronouced as "slot". In addition, the
      symbol &lt;code>&amp;lt;...>&lt;/code>, pronounced as "rest-slot", matches all
      residual arguments of a variable argument procedure. As you can see from
      the last example above, the first argument can also be a slot, as one
      should expect in Scheme.
      &lt;/p>&lt;p>In addition to &lt;code>cut&lt;/code>, there is a
      variant called &lt;code>cute&lt;/code> (a mnemonic for "&lt;code>cut&lt;/code> with
      evaluated non-slots") which evaluates the non-slot expressions at the
      time the procedure is specialized, not at the time the specialized
      procedure is called. For example,
      &lt;table>
        &lt;tr>
          &lt;td>&lt;code>(cute cons (+ a 1) &amp;lt;>)&lt;/code>
          &lt;/td>&lt;td>is the same as
          &lt;/td>&lt;td>&lt;code>(let ((a1 (+ a 1))) (lambda (x2) (cons a1 x2)))&lt;/code>
      &lt;/td>&lt;/tr>&lt;/table>
      &lt;/p>&lt;p>As you see from comparing this example with the
      first example above, the &lt;code>cute&lt;/code>-variant will evaluate &lt;code>(+
      a 1)&lt;/code> once, while the &lt;code>cut&lt;/code>-variant will evaluate it
      during every invokation of the resulting procedure.
      &lt;/p>&lt;p>The mechanism proposed in this SRFI allows
      specializing any subset of the variables of a procedure. The result can
      be of fixed arity or of variable arity. The mechanism does not allow
      permutation, omission, duplication or any other processing of the
      arguments; for this it is necessary to write to use a different mechanism
      such as &lt;code>lambda&lt;/code>.&lt;/p>&lt;/blockquote></description><dc:creator>Sebastian Egner</dc:creator><pubDate>Thu, 14 Feb 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 22: Running Scheme Scripts on Unix</title><link>https://srfi.schemers.org/srfi-22/</link><guid>https://srfi.schemers.org/srfi-22</guid><description>SRFI 22 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes basic prerequisites for
      running Scheme programs as Unix scripts in a uniform way. Specifically,
      it describes:
      &lt;ul>
        &lt;li>the syntax of Unix scripts written in
        Scheme,
        &lt;/li>&lt;li>a uniform convention for calling the Scheme
        script interpreter, and
        &lt;/li>&lt;li>a method for accessing the Unix command line
        arguments from within the Scheme script.
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Martin Gasbichler and Michael Sperber</dc:creator><pubDate>Sun, 20 Jan 2002 12:00:00 -0800</pubDate></item><item><title>SRFI 23: Error reporting mechanism</title><link>https://srfi.schemers.org/srfi-23/</link><guid>https://srfi.schemers.org/srfi-23</guid><description>SRFI 23 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>A mechanism is proposed to allow Scheme code to
      report errors and abort execution. The proposed mechanism is already
      implemented in several Scheme systems and can be implemented, albeit
      imperfectly, in any R5RS conforming Scheme.&lt;/p>&lt;/blockquote></description><dc:creator>Stephan Houben</dc:creator><pubDate>Fri, 22 Jun 2001 12:00:00 -0800</pubDate></item><item><title>SRFI 20: Simple object system</title><link>https://srfi.schemers.org/srfi-20/</link><guid>https://srfi.schemers.org/srfi-20</guid><description>SRFI 20 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI presents an object system to define
      classes, generic functions as well as to support some level of
      introspection. This object system is based on Meroon-V3 which is itself
      inspired by CLOS. &lt;a href="http://www-spi.lip6.fr/~queinnec/WWW/Meroon.html">Meroon-V3&lt;/a> is
      distributed and used since 1992.&lt;/p>&lt;/blockquote></description><dc:creator>Christian Queinnec</dc:creator><pubDate>Sun, 29 Apr 2001 12:00:00 -0800</pubDate></item><item><title>SRFI 18: Multithreading support</title><link>https://srfi.schemers.org/srfi-18/</link><guid>https://srfi.schemers.org/srfi-18</guid><description>SRFI 18 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines the following multithreading
      datatypes for Scheme
      &lt;ul>
        &lt;li>Thread
        &lt;/li>&lt;li>Mutex
        &lt;/li>&lt;li>Condition variable
        &lt;/li>&lt;li>Time
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>It also defines a mechanism to handle
      exceptions and some multithreading exception datatypes.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Wed, 14 Mar 2001 12:00:00 -0800</pubDate></item><item><title>SRFI 21: Real-time multithreading support</title><link>https://srfi.schemers.org/srfi-21/</link><guid>https://srfi.schemers.org/srfi-21</guid><description>SRFI 21 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI defines the following multithreading
      datatypes for Scheme
      &lt;ul>
        &lt;li>Thread
        &lt;/li>&lt;li>Mutex
        &lt;/li>&lt;li>Condition variable
        &lt;/li>&lt;li>Time
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>It also defines a mechanism to handle
      exceptions and some multithreading exception datatypes.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Fri, 02 Mar 2001 12:00:00 -0800</pubDate></item><item><title>SRFI 13: String Libraries</title><link>https://srfi.schemers.org/srfi-13/</link><guid>https://srfi.schemers.org/srfi-13</guid><description>SRFI 13 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;abbr title="Revised^5 Report on Scheme">R5RS&lt;/abbr> Scheme has an impoverished set
      of string-processing utilities, which is a problem for authors of
      portable code. This &lt;abbr title="Scheme Request for Implementation">SRFI&lt;/abbr> proposes a coherent and
      comprehensive set of string-processing procedures; it is accompanied by a
      reference implementation of the spec. The reference implementation
      is
      &lt;ul>
        &lt;li>portable
        &lt;/li>&lt;li>efficient
        &lt;/li>&lt;li>open source
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>The routines in this SRFI are
      backwards-compatible with the string-processing routines of &lt;abbr title="Revised^5 Report on Scheme">R5RS&lt;/abbr>.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Thu, 28 Dec 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 14: Character-set Library</title><link>https://srfi.schemers.org/srfi-14/</link><guid>https://srfi.schemers.org/srfi-14</guid><description>SRFI 14 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The ability to efficiently represent and
      manipulate sets of characters is an unglamorous but very useful
      capability for text-processing code -- one that tends to pop up in the
      definitions of other libraries. Hence it is useful to specify a general
      substrate for this functionality early. This SRFI defines a general
      library that provides this functionality.
      &lt;/p>&lt;p>It is accompanied by a reference implementation
      for the spec. The reference implementation is fairly efficient,
      straightforwardly portable, and has a "free software" copyright. The
      implementation is tuned for "small" 7 or 8 bit character types, such as
      ASCII or Latin-1; the data structures and algorithms would have to be
      altered for larger 16 or 32 bit character types such as Unicode --
      however, the specs have been carefully designed with these larger
      character types in mind.
      &lt;/p>&lt;p>Several forthcoming SRFIs can be defined in
      terms of this one:
      &lt;ul>
        &lt;li>string library
        &lt;/li>&lt;li>delimited input procedures (&lt;em>e.g.&lt;/em>,
        &lt;code>read-line&lt;/code>)
        &lt;/li>&lt;li>regular expressions
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Thu, 28 Dec 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 19: Time Data Types and Procedures</title><link>https://srfi.schemers.org/srfi-19/</link><guid>https://srfi.schemers.org/srfi-19</guid><description>SRFI 19 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Points in time are represented as the number of
      seconds (with nanosecond precision) since "the epoch," a zero point in
      time. Several standard variants are defined, including UTC (universal
      coordinated time), TAI (international atomic time), and monotonic time. A
      point in time can also be represented as a Julian Day or Modified Julian
      Day number. Time durations, including time spent in a process or thread,
      are defined. Conversion routines are provided. The procedure CURRENT-TIME
      queries the current time in a specified variant, with a system-dependent
      resolution. Procedures for time arithmetic and time comparisons are also
      provided.
      &lt;/p>&lt;p>A date is a representation of a point in time
      in the Gregorian calendar, a 24 hour clock (with nanosecond precision)
      and a time zone offset from UTC. Procedures for converting between time
      and dates are provided, as well as for reading and writing string
      representations of dates.&lt;/p>&lt;/blockquote></description><dc:creator>Will Fitzgerald</dc:creator><pubDate>Thu, 31 Aug 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 17: Generalized set!</title><link>https://srfi.schemers.org/srfi-17/</link><guid>https://srfi.schemers.org/srfi-17</guid><description>SRFI 17 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This is a proposal to allow procedure calls
      that evaluate to the "value of a location" to be used to &lt;em>set&lt;/em> the
      value of the location, when used as the first operand of
      &lt;code>set!&lt;/code>.For example:
      &lt;pre>
(set! (car x) (car y))
&lt;/pre>becomes equivalent to
      &lt;pre>
(set-car! x (car y))
&lt;/pre>
      &lt;/p>&lt;p>Many programming languages have the concept of
      an &lt;i>lvalue&lt;/i>. that is an "expression" that "evaluates" to a location,
      and which can appear on the left-hand-side of an assignment. Common Lisp
      has a related concept of "generalized variables" which can be used in
      &lt;code>setf&lt;/code> and some other special forms. However, the Common Lisp
      concept is based on the idea of compile-time recognition of special
      "location-producing" functions; this does not seem to be in the "spirit
      of Scheme".
      &lt;/p>&lt;p>This SRFI proposes an extension of
      &lt;code>set!&lt;/code> so that it provides similar functionality as Common
      Lisp's &lt;code>setf&lt;/code>, except that the updater is associated with a
      procedure value, rather than a name.&lt;/p>&lt;/blockquote></description><dc:creator>Per Bothner</dc:creator><pubDate>Mon, 24 Jul 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 11: Syntax for receiving multiple values</title><link>https://srfi.schemers.org/srfi-11/</link><guid>https://srfi.schemers.org/srfi-11</guid><description>SRFI 11 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The SRFI introduces syntactic forms LET-VALUES
      and LET*-VALUES that bind the values of expressions that return multiple
      values.&lt;/p>&lt;/blockquote></description><dc:creator>Lars T Hansen</dc:creator><pubDate>Wed, 15 Mar 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 15: Syntax for dynamic scoping</title><link>https://srfi.schemers.org/srfi-15/</link><guid>https://srfi.schemers.org/srfi-15</guid><description>SRFI 15 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>FLUID-LET, a binding syntax for dynamic
      scoping, is introduced.&lt;/p>&lt;/blockquote></description><dc:creator>Lars T Hansen</dc:creator><pubDate>Fri, 10 Mar 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 16: Syntax for procedures of variable arity</title><link>https://srfi.schemers.org/srfi-16/</link><guid>https://srfi.schemers.org/srfi-16</guid><description>SRFI 16 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>CASE-LAMBDA, a syntax for procedures with a
      variable number of arguments, is introduced.&lt;/p>&lt;/blockquote></description><dc:creator>Lars T Hansen</dc:creator><pubDate>Fri, 10 Mar 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 12: Exception Handling</title><link>https://srfi.schemers.org/srfi-12/</link><guid>https://srfi.schemers.org/srfi-12</guid><description>SRFI 12 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>The SRFI defines exception-handling constructs
      for Scheme, including
      &lt;ul>
        &lt;li>the CURRENT-EXCEPTION-HANDLER procedure for
        obtaining the current exception-handling procedure,
        &lt;/li>&lt;li>the WITH-EXCEPTION-HANDLER procedure and
        HANDLE-EXCEPTIONS form for installing an exception-handling
        procedure,
        &lt;/li>&lt;li>the ABORT and SIGNAL procedures for raising
        exceptions, and
        &lt;/li>&lt;li>constructs for creating and inspecting
        &lt;em>condition&lt;/em> values, which encapsulate information about an
        exception.
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>This SRFI requires a Scheme implementation to
      raise an exception whenever an error is to be signaled or whenever the
      system determines that evaluation cannot proceed in a manner consistent
      with the semantics of Scheme. However, this SRFI does not define the
      information to be supplied by an implementation for each possible kind of
      exception; such a specification is left open for future SRFIs.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>William Clinger, R. Kent Dybvig, Matthew Flatt, and Marc Feeley</dc:creator><pubDate>Sat, 22 Jan 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 10: #, external form</title><link>https://srfi.schemers.org/srfi-10/</link><guid>https://srfi.schemers.org/srfi-10</guid><description>SRFI 10 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The present SRFI proposes an extensible
      external representation of Scheme values, a notational convention for
      future SRFIs. This SRFI adds &lt;code>#,(&lt;/code> as a new token and extends
      production rules of the grammar for a Scheme reader. The
      &lt;code>#,()&lt;/code> form can be used for example to denote values that do
      not have a convenient printed representation, as well for conditional
      code compilation. It is proposed that future SRFIs that contain new read
      syntax for values use the &lt;code>#,()&lt;/code> notation with an appropriate
      tag symbol.
      &lt;/p>&lt;p>As a particular example and the reference
      implementation for the &lt;code>#,()&lt;/code> convention, this SRFI describes
      an interpretation of the &lt;code>#,()&lt;/code> external form as a read-time
      application.&lt;/p>&lt;/blockquote></description><dc:creator>Oleg Kiselyov</dc:creator><pubDate>Thu, 13 Jan 2000 12:00:00 -0800</pubDate></item><item><title>SRFI 1: List Library</title><link>https://srfi.schemers.org/srfi-1/</link><guid>https://srfi.schemers.org/srfi-1</guid><description>SRFI 1 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>&lt;abbr title="Revised^5 Report on Scheme">R5RS&lt;/abbr> Scheme has an impoverished set
      of list-processing utilities, which is a problem for authors of portable
      code. This &lt;abbr title="Scheme Request for Implementation">SRFI&lt;/abbr>
      proposes a coherent and comprehensive set of list-processing procedures;
      it is accompanied by a reference implementation of the spec. The
      reference implementation is
      &lt;ul>
        &lt;li>portable
        &lt;/li>&lt;li>efficient
        &lt;/li>&lt;li>completely open, public-domain source
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Sat, 09 Oct 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 9: Defining Record Types</title><link>https://srfi.schemers.org/srfi-9/</link><guid>https://srfi.schemers.org/srfi-9</guid><description>SRFI 9 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes syntax for creating new
      data types, called record types. A predicate, constructor, and field
      accessors and modifiers are defined for each record type. Each new record
      type is distinct from all existing types, including other record types
      and Scheme's predefined types.&lt;/p>&lt;/blockquote></description><dc:creator>Richard Kelsey</dc:creator><pubDate>Thu, 09 Sep 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 8: receive: Binding to multiple values</title><link>https://srfi.schemers.org/srfi-8/</link><guid>https://srfi.schemers.org/srfi-8</guid><description>SRFI 8 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The only mechanism that R&lt;sup>5&lt;/sup>RS
      provides for binding identifiers to the values of a multiple-valued
      expression is the primitive &lt;code>call-with-values&lt;/code>. This SRFI
      proposes a more concise, more readable syntax for creating such
      bindings.&lt;/p>&lt;/blockquote></description><dc:creator>John David Stone</dc:creator><pubDate>Mon, 30 Aug 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 3: List-Set Library</title><link>https://srfi.schemers.org/srfi-3/</link><guid>https://srfi.schemers.org/srfi-3</guid><description>SRFI 3 is now in &lt;em>withdrawn&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI proposes a coherent and comprehensive
      set of procedures for manipulating lists as sets; it is accompanied by a
      reference implementation of the spec. The reference implementation
      is
      &lt;ul>
        &lt;li>portable
        &lt;/li>&lt;li>efficient
        &lt;/li>&lt;li>completely open, public-domain source
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>Be aware that these procedures are inherently
      O(n^2) in the lengths of their parameter lists - serious set operations
      on large lists should use alternate techniques.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Olin Shivers</dc:creator><pubDate>Thu, 26 Aug 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 7: Feature-based program configuration language</title><link>https://srfi.schemers.org/srfi-7/</link><guid>https://srfi.schemers.org/srfi-7</guid><description>SRFI 7 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes a configuration language to
      be used for specifying the set of Scheme features or extensions required
      to run a program. In addition to a list of required features, a program
      may also contain Scheme code to be used only when a particular feature or
      combination of features is available.
      &lt;/p>&lt;p>The configuration language is entirely distinct
      from Scheme; it is neither embedded in Scheme nor includes Scheme as a
      subset.&lt;/p>&lt;/blockquote></description><dc:creator>Richard Kelsey</dc:creator><pubDate>Thu, 19 Aug 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 6: Basic String Ports</title><link>https://srfi.schemers.org/srfi-6/</link><guid>https://srfi.schemers.org/srfi-6</guid><description>SRFI 6 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Scheme's i/o primitives are extended by adding
      three new procedures that
      &lt;ul>
        &lt;li>create an input port from a string,
        &lt;/li>&lt;li>create an output port whose contents are
        accumulated in Scheme's working memory instead of an external file,
        and
        &lt;/li>&lt;li>extract the accumulated contents of an
        in-memory output port and return them in the form of a string.
      &lt;/li>&lt;/ul>&lt;li>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>William D Clinger</dc:creator><pubDate>Thu, 01 Jul 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 4: Homogeneous numeric vector datatypes</title><link>https://srfi.schemers.org/srfi-4/</link><guid>https://srfi.schemers.org/srfi-4</guid><description>SRFI 4 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>This SRFI describes a set of datatypes for
      vectors whose elements are of the same numeric type (signed or unsigned
      exact integer or inexact real of a given precision). These datatypes
      support operations analogous to the Scheme vector type, but they are
      distinct datatypes. An external representation is specified which must be
      supported by the &lt;code>read&lt;/code> and &lt;code>write&lt;/code> procedures and
      by the program parser (i.e. programs can contain references to literal
      homogeneous vectors).&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Sat, 22 May 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 0: Feature-based conditional expansion construct</title><link>https://srfi.schemers.org/srfi-0/</link><guid>https://srfi.schemers.org/srfi-0</guid><description>SRFI 0 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>It is desirable that programs which depend on
      additions to standard Scheme name those additions. SRFIs provide the
      specifications of these additions ("features"), and SRFI 0 provides the
      means to actually check that these features are present in the Scheme
      system by means of the &lt;code>cond-expand&lt;/code> construct. It is
      anticipated that there will be two main classes of features:
      &lt;ul>
        &lt;li>sets of value and syntax bindings
        &lt;/li>&lt;li>reader syntax extensions
      &lt;/li>&lt;/ul>&lt;li>
      &lt;p>("Reader syntax" refers to aspects of the
      syntax described by the grammars in the Scheme reports.)
      &lt;/p>&lt;p>The former class of features will probably
      include most SRFIs, exemplified by the list library specified in &lt;a href="https://srfi.schemers.org/srfi-1/">SRFI 1&lt;/a>. The latter class includes Unicode source code
      support and different kinds of parentheses.
      &lt;/p>&lt;p>Control over the presence of individual
      features will vary over different Scheme systems. A given feature may be
      absent or provided by default in some Scheme systems and in others some
      mechanism (such as an "import" clause in the code or a program
      configuration file, a command line option, a dependency declaration in a
      module definition, etc.) will be required for the feature to be present
      in the system.
      &lt;/p>&lt;p>Moreover, in some systems a given feature may
      be in effect throughout the entire program if it is in effect anywhere at
      all. Other systems may have more precise mechanisms to control the scope
      of a feature (this might be the case for example when a module system is
      supported). In general it is thus possible that a feature is in effect in
      some parts of the program and not in others. This allows conflicting
      SRFIs to be present in a given program as long as their scope do not
      intersect.
      &lt;/p>&lt;p>SRFI 0 does not prescribe a particular
      mechanism for controlling the presence of a feature as it is our opinion
      that this should be the role of a module system. We expect that future
      module system SRFIs will need to extend the semantics of SRFI 0 for their
      purposes, for example by defining feature scoping rules or by
      generalizing the feature testing construct.&lt;/p>&lt;/li>&lt;/p>&lt;/blockquote></description><dc:creator>Marc Feeley</dc:creator><pubDate>Fri, 07 May 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 5: A compatible let form with signatures and rest arguments</title><link>https://srfi.schemers.org/srfi-5/</link><guid>https://srfi.schemers.org/srfi-5</guid><description>SRFI 5 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>The &lt;i>named-let&lt;/i> incarnation of the
      &lt;code>let&lt;/code> form has two slight inconsistencies with the
      &lt;code>define&lt;/code> form. As defined, the &lt;code>let&lt;/code> form makes no
      accommodation for rest arguments, an issue of functionality and
      consistency. As defined, the &lt;code>let&lt;/code> form does not accommodate
      signature-style syntax, an issue of aesthetics and consistency. Both
      issues are addressed here in a manner which is compatible with the
      traditional &lt;code>let&lt;/code> form but for minor extensions.&lt;/p>&lt;/blockquote></description><dc:creator>Andy Gaynor</dc:creator><pubDate>Mon, 26 Apr 1999 12:00:00 -0800</pubDate></item><item><title>SRFI 2: AND-LET*: an AND with local bindings, a guarded LET* special form</title><link>https://srfi.schemers.org/srfi-2/</link><guid>https://srfi.schemers.org/srfi-2</guid><description>SRFI 2 is now in &lt;em>final&lt;/em> status.&lt;blockquote>      &lt;p>Like an ordinary AND, an AND-LET* special form
      evaluates its arguments -- expressions -- one after another in order,
      till the first one that yields #f. Unlike AND, however, a non-#f result
      of one expression can be bound to a fresh variable and used in the
      subsequent expressions. AND-LET* is a cross-breed between LET* and
      AND.&lt;/p>&lt;/blockquote></description><dc:creator>Oleg Kiselyov</dc:creator><pubDate>Mon, 01 Mar 1999 12:00:00 -0800</pubDate></item></channel></rss>